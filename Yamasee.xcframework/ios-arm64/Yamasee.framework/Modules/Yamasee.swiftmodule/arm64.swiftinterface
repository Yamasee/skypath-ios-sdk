// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Yamasee
import CFNetwork
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreGraphics
import CoreLocation
import CoreMotion
import CryptoKit
import Foundation
import GameKit
import MapKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
@_exported import Yamasee
import _Concurrency
public class FlightPlan : Swift.Codable {
  final public let id: Swift.Int
  final public let flightPlanId: Swift.String
  final public let updatedAt: Swift.String
  final public let airlineId: Swift.String
  final public let flightId: Swift.String
  final public let departureAirport: Swift.String
  final public let arrivalAirport: Swift.String
  final public let fuelWeight: Swift.Int?
  final public let fuelUnit: Swift.String?
  final public let fuelDuration: Swift.String?
  final public let reserveFuel: Swift.Int?
  final public let reserveFuelUnit: Swift.String?
  final public let scheduledDeparture: Swift.String
  final public let scheduledArrival: Swift.String
  final public let flightPlanVersion: Swift.String?
  final public let waypoints: [Yamasee.FlightWaypoint]
  final public let aircraftRegistration: Swift.String?
  final public let aircraftIdentifier: Swift.String?
  final public let aircraftIcaoType: Swift.String?
  final public let aircraftIataType: Swift.String?
  public var aircraft: Yamasee.Aircraft? {
    get
    set
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct Airport : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var icao: Swift.String
  public var lat: Swift.Float
  public var lng: Swift.Float
  public var iata: Swift.String
  public var size: Swift.Int
  public var show: Swift.Bool
  public var search: Swift.Bool
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Yamasee.Airport, b: Yamasee.Airport) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
extension Yamasee.Airport {
  public init(from decoder: Swift.Decoder) throws
}
extension Yamasee.Airport {
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public class FlightWaypoint : Swift.Codable {
  final public let id: Swift.Int
  final public let flightPlanId: Swift.String?
  final public let waypointId: Swift.String
  final public let name: Swift.String
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  final public let order: Swift.Int
  final public let estimatedAltitude: Swift.Int?
  required public init(from decoder: Swift.Decoder) throws
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension Yamasee.FlightWaypoint : Swift.Equatable {
  public static func == (lhs: Yamasee.FlightWaypoint, rhs: Yamasee.FlightWaypoint) -> Swift.Bool
}
extension Yamasee.FlightWaypoint {
  public var airport: Yamasee.Airport? {
    get
  }
}
public struct RawDataResponseRequest {
  public let type: Yamasee.RawDataTriggerType
  public let startTs: Swift.Int
  public let duration: Swift.Int
}
public struct User : Swift.Codable {
  public let id: Swift.String
  public let role: Swift.String
  public let userName: Swift.String?
  public let company: Swift.String?
  public let companyId: Swift.String
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let routingEnabled: Swift.Bool?
  public let betaFeatures: Swift.Bool?
  public let flightPlanPrefix: Swift.String?
  public let demo: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AlertError : Yamasee.YSError {
  case general(error: Yamasee.GeneralError)
}
public struct LandingTimeReport : Swift.Codable {
  public let landingTime: Swift.Int
  public let ts: Swift.Int
  public let airportICAO: Swift.String
  public let delayTime: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ForgotPasswordError : Yamasee.YSError {
  case userIdInvalid
  case general(error: Yamasee.GeneralError)
}
public enum TurbulenceSeverity : Swift.Int, Swift.Equatable, Swift.Comparable, Swift.Codable {
  case None
  case Light
  case LightModarate
  case Moderate
  case ModerateSevere
  case Severe
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Yamasee.TurbulenceSeverity {
  public static func < (lhs: Yamasee.TurbulenceSeverity, rhs: Yamasee.TurbulenceSeverity) -> Swift.Bool
}
extension CoreLocation.CLLocation {
  public var tile: Yamasee.Tile {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D {
  public var tile: Yamasee.Tile {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D {
  public func isBehindOf(coordinate: CoreLocation.CLLocationCoordinate2D, heading: Swift.Double) -> Swift.Bool
}
public struct Tile : Swift.Decodable, Swift.Equatable, Swift.Hashable {
  public var tileX: Swift.Int
  public var tileY: Swift.Int
  public var alt: Swift.Int
  public init(tileX: Swift.Int, tileY: Swift.Int, alt: Swift.Int?)
  public init?(keyByCoord: Swift.String)
  public static func == (a: Yamasee.Tile, b: Yamasee.Tile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension Yamasee.Tile {
  public var key: Swift.String {
    get
  }
  public var keyByCoord: Swift.String {
    get
  }
  public var altMetersRange: Swift.ClosedRange<Swift.Double> {
    get
  }
  public var altMeters: Swift.Double {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class YMLocalNotificationManager : ObjectiveC.NSObject {
  public static let shared: Yamasee.YMLocalNotificationManager
  public func checkNotificationSettings(completion: ((_ status: UserNotifications.UNAuthorizationStatus) -> Swift.Void)? = nil)
  public func scheduleNotification(title: Swift.String, body: Swift.String, sound: Swift.String? = nil, contentCategoryIdentifier: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public enum RawDataTriggerType : Swift.RawRepresentable, Swift.Codable {
  case test
  case sequence(sev: Yamasee.TurbulenceSeverity)
  case lonely(sev: Yamasee.TurbulenceSeverity)
  case sequenceTiles(sev: Yamasee.TurbulenceSeverity)
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class YMLogger {
  public static let shared: Yamasee.YMLogger
  public var enabled: Swift.Bool {
    get
    set
  }
  public var rollingFrequency: Swift.Double
  public var maximumNumberOfLogFiles: Swift.Int
  @objc deinit
  public func log(_ text: Swift.String)
  public func logFileUrls() -> [Foundation.URL]
}
extension Yamasee.YMLogger {
  public func logNetworkInterfaces()
}
public struct BrakingAction : Swift.Codable {
  public var trend: Yamasee.AirportDataTrend
  public var reports: [Yamasee.BrakingActionReport]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TurbulenceItem {
  public let sev: Yamasee.TurbulenceSeverity
  public let bbox: [CoreLocation.CLLocationCoordinate2D]
  public let tile: Yamasee.Tile
  public let alt: Swift.Double
  public let ts: Swift.Int
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public init(sev: Yamasee.TurbulenceSeverity, bbox: [CoreLocation.CLLocationCoordinate2D], tile: Yamasee.Tile, alt: Swift.Double, ts: Swift.Int, coordinate: CoreLocation.CLLocationCoordinate2D)
}
extension Yamasee.TurbulenceItem {
  public var description: Swift.String {
    get
  }
}
public enum BrakingActionLevel : Swift.String, Swift.Codable {
  case lessThanPoor
  case poor
  case medPoor
  case med
  case goodMed
  case good
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BrakingActionReport : Swift.Codable {
  public var runway: Swift.String
  public var level: Yamasee.BrakingActionLevel
  public var ts: Swift.Int
  public var airportICAO: Swift.String
  public var aircraft: Swift.String?
  public var flight_id: Swift.String?
  public var id: Swift.String?
  public init(runway: Swift.String, level: Yamasee.BrakingActionLevel, date: Foundation.Date, airport: Yamasee.Airport)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Yamasee.BrakingActionReport {
  public var date: Foundation.Date {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Yamasee.Tile {
  public func isBehindOf(tile: Yamasee.Tile, heading: Swift.Double) -> Swift.Bool
}
public struct RouteWaypointsTranslationResponse : Swift.Decodable {
  public var waypoints: [Yamasee.FlightWaypoint]
  public var pathQuery: [Yamasee.PathQuery]
  public init()
  public init(from decoder: Swift.Decoder) throws
}
public struct PathQuery : Swift.Decodable {
  public let name: Swift.String
  public let processed: Swift.Bool
  public var subWaypoints: [Yamasee.FlightWaypoint]?
  public init(from decoder: Swift.Decoder) throws
}
extension CoreLocation.CLError.Code : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum LoginError : Yamasee.YSError {
  case userIdOrPasswordInvalid
  case userLocked(message: Swift.String)
  case ssoInvalid
  case ssoDisabledInPublic
  case weakPassword
  case general(error: Yamasee.GeneralError)
}
extension CoreLocation.CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct AviationWeather : Swift.Codable {
  public var metar: Yamasee.AviationWeatherMetar
  public var taf: Yamasee.AviationWeatherTaf
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AviationWeatherMetar : Swift.Codable {
  public var rawText: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AviationWeatherTaf : Swift.Codable {
  public var rawText: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AlertQuery {
  public var coordinate: CoreLocation.CLLocationCoordinate2D?
  public var altitude: Foundation.Measurement<Foundation.UnitLength>
  public let heading: Foundation.Measurement<Foundation.UnitAngle>?
  public let timeSpan: Swift.Int
  public let distance: Foundation.Measurement<Foundation.UnitLength>
  public let angleSpan: Foundation.Measurement<Foundation.UnitAngle>
  public var coordinates: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Foundation.Measurement<Foundation.UnitLength>?
  public init(coordinate: CoreLocation.CLLocationCoordinate2D? = nil, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>? = nil, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees), coordinates: [CoreLocation.CLLocationCoordinate2D]? = nil, widthAround: Foundation.Measurement<Foundation.UnitLength>? = nil)
  public init(forMonitoringTimeSpan timeSpan: Swift.Int = 120, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees))
}
public enum DataMode : Swift.String, Swift.Codable {
  case `default`
  case writeOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AlertResultType {
  case none
  case coordinates
  case beam
  public static func == (a: Yamasee.AlertResultType, b: Yamasee.AlertResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertResult {
  public var at: [Yamasee.TurbulenceItem]
  public var atMax: Yamasee.TurbulenceItem?
  public var atMaxSev: Yamasee.TurbulenceSeverity
  public var below: [Yamasee.TurbulenceItem]
  public var belowMax: Yamasee.TurbulenceItem?
  public var belowMaxSev: Yamasee.TurbulenceSeverity
  public var above: [Yamasee.TurbulenceItem]
  public var aboveMax: Yamasee.TurbulenceItem?
  public var aboveMaxSev: Yamasee.TurbulenceSeverity
  public var type: Yamasee.AlertResultType
}
extension Yamasee.AlertResult : Swift.Equatable {
  public static func == (lhs: Yamasee.AlertResult, rhs: Yamasee.AlertResult) -> Swift.Bool
}
public struct SettingsValue<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var value: T?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ServerSettings : Swift.Codable {
  public var updatedAt: Swift.String?
  public var connectivity: Yamasee.SettingsConnectivity?
  public var debug: Yamasee.SettingsDebug?
  public var airportInfo: Yamasee.SettingsAirportInfo?
  public var brakingActions: Yamasee.SettingsBrakingActions?
  public var turbulence: Yamasee.SettingsTurbulence?
  public var ui: Yamasee.SettingsUI?
  public var beta: Yamasee.SettingsBeta?
  public var data: Yamasee.SettingsData?
  public var location: Yamasee.SettingsLocation?
  public var updatedAtDate: Foundation.Date? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsConnectivity : Swift.Codable {
  public var timeToNotice: Yamasee.SettingsValue<Swift.Int>?
  public var timeToAlert: Yamasee.SettingsValue<Swift.Int>?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsDebug : Swift.Codable {
  public var sendLogsAutomaticallyOnFlightEnd: Yamasee.SettingsValue<Swift.Bool>?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsAirportInfo : Swift.Codable {
  public struct Weather : Swift.Codable {
    public var enabled: Swift.Bool?
    public var expireIn: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ArrivalDelays : Swift.Codable {
    public var enabled: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct BrakingActions : Swift.Codable {
    public var enabled: Swift.Bool?
    public var expireIn: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Features : Swift.Codable {
    public var weather: Yamasee.SettingsAirportInfo.Weather?
    public var arrivalDelays: Yamasee.SettingsAirportInfo.ArrivalDelays?
    public var brakingActions: Yamasee.SettingsAirportInfo.BrakingActions?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var enabled: Swift.Bool?
  public var features: Yamasee.SettingsAirportInfo.Features?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsBrakingActions : Swift.Codable {
  public struct Popup : Swift.Codable {
    public var enabled: Swift.Bool?
    public var weatherTypes: Swift.String?
    public var zeroKnotsDuration: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var popup: Yamasee.SettingsBrakingActions.Popup?
  public var expireIn: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsTurbulence : Swift.Codable {
  public var tilesBelow: Swift.Int?
  public var tilesAbove: Swift.Int?
  public var alertMinSeverity: Yamasee.TurbulenceSeverity?
  public var alertMinTimeTo: Swift.Int?
  public var alertMaxTimeTo: Swift.Int?
  public var alertMinTimeToShowOnMap: Swift.Int?
  public var alertMaxTimeToShowOnMap: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsUI : Swift.Codable {
  public struct VerticalView : Swift.Codable {
    public var enabled: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct TimeControl : Swift.Codable {
    public var value: [Swift.Double]?
    public var `default`: Swift.Double?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var verticalView: Yamasee.SettingsUI.VerticalView?
  public var timeControl: Yamasee.SettingsUI.TimeControl?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsBeta : Swift.Codable {
  public var enabled: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsData : Swift.Codable {
  public var pollEveryXSecs: Swift.Int?
  public var updateEveryXSecs: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsLocation : Swift.Codable {
  public var outdatedTime: Swift.Int?
  public var drTime: Swift.Int?
  public var refreshTime: Swift.Int?
  public var refreshInterval: Swift.Int?
  public var inAirAltitude: Swift.Int?
  public var inAirSpeed: Swift.Int?
  public var externalOutdatedTime: Swift.Int?
  public var externalEnabled: Swift.Bool?
  public var baroAltitudeDifference: Swift.Double?
  public var accuracyVertical: Swift.Double?
  public var accuracyHorizontal: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Flight : Swift.Codable {
  public let dep: Swift.String
  public let dest: Swift.String
  public let fnum: Swift.String
  public var id: Swift.String
  public init(dep: Swift.String, dest: Swift.String, fnum: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(*, deprecated, message: "Use YMLocation instead")
public typealias YamaseeLocation = Yamasee.YMLocation
@available(*, deprecated, message: "Use YMLocationState instead")
public typealias YamaseeLocationState = Yamasee.YMLocationState
public enum YMLocationState {
  case good
  case dr
  case none
  case external
  case externalDr
  public static func == (a: Yamasee.YMLocationState, b: Yamasee.YMLocationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YMLocation {
  public let location: CoreLocation.CLLocation?
  public let state: Yamasee.YMLocationState
}
public enum PartnerLoginError : Yamasee.YSError {
  case userIdOrCompanyIdInvalid
  case general(error: Yamasee.GeneralError)
}
public enum YMStaticContentType {
  case airports
  case fakeTurbulences
  case airportRunways
  case userGuide
  case releaseNotes
  case troubleshooting
  case training
  public static var appVersion: Swift.String {
    get
    set
  }
  public var fileUrl: Foundation.URL {
    get
  }
  public static func == (a: Yamasee.YMStaticContentType, b: Yamasee.YMStaticContentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Hello : Swift.Codable {
  public var ver: Swift.String
  public var currentAppVersion: Swift.String
  public var minimalCompatibleAppVersion: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DataHistoryTime : Swift.Double, Swift.Codable, Swift.CaseIterable {
  case halfHour
  case hour
  case twoHours
  case fourHours
  case sixHours
  public var asPathComponent: Swift.String {
    get
  }
  public init?(rawValue: Swift.Double)
  public typealias AllCases = [Yamasee.DataHistoryTime]
  public typealias RawValue = Swift.Double
  public static var allCases: [Yamasee.DataHistoryTime] {
    get
  }
  public var rawValue: Swift.Double {
    get
  }
}
public enum QueryError : Yamasee.YSError {
  case altitudeRangeNotRoundToThousandFeet
  case general(error: Yamasee.GeneralError)
}
public protocol YSError : Swift.Error {
}
public struct TurbulenceResult {
  public var items: [Yamasee.TurbulenceItem]
  public var geoJSON: Swift.String
}
public struct SessionTimeouts : Swift.Codable {
  public var session: Swift.Int
  public var idle: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol YamaseeCoreDelegate : AnyObject {
  func newTurbulenceData(serverUpdateTime: Swift.Int)
  func newTrafficData(serverUpdateTime: Swift.Int)
  func deviceAngleStatusChanged(isInAngle: Swift.Bool)
  func turbulenceDetected(newTurbulence: Yamasee.TurbulenceItem)
  func loginStatus(isLoggedIn: Swift.Bool)
  func airborneStatus(isAirborne: Swift.Bool)
  func locationUpdated(to location: Yamasee.YMLocation)
  @available(*, deprecated, message: "Use locationUpdated(to:) instead")
  func yamaseeNewLocationUpdate(location: Yamasee.YamaseeLocation)
  func locationManagerDidChangeAuthorization(status: CoreLocation.CLAuthorizationStatus)
  func locationManagerDidFail(withError error: Swift.Error)
  func ownTurbulenceChanged()
  func newWeatherData(serverUpdateTime: Swift.Int)
  func ownWeatherChanged()
  func newAirportsData()
  func serverReachabilityUpdate(isReachable: Swift.Bool)
  func feedbackRequested(with request: Yamasee.RawDataResponseRequest, completion: @escaping (Yamasee.RawDataUserResponse?) -> Swift.Void)
  func newDataFetchingFailed(with error: Yamasee.YSError)
  func newAlert(_ alert: Yamasee.AlertResult)
  func flightPhaseDidChange(to flightPhase: Yamasee.FlightPhase)
  func flightPlanDidUpdate(to flightPlan: Yamasee.FlightPlan)
}
@_hasMissingDesignatedInitializers public class YamaseeCore {
  public static let shared: Yamasee.YamaseeCore
  weak public var delegate: Yamasee.YamaseeCoreDelegate?
  @available(*, deprecated, message: "Use start(apiKey:baseUrl:env:) instead")
  public func start(apiKey: Swift.String, baseUrl: Swift.String, dataUrl: Swift.String? = nil)
  public func start(apiKey: Swift.String, baseUrl: Swift.String, env: Yamasee.Environment? = nil)
  public func partnerLogin(userId: Swift.String, companyId: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: Yamasee.PartnerLoginError?) -> Swift.Void)
  public func userLogin(userId: Swift.String, password: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func ssoLogin(from: UIKit.UIViewController, airlinesCode: Swift.String? = nil, userId: Swift.String? = nil, onDisappear: @escaping () -> Swift.Void, completion: @escaping (_ result: Swift.Bool, _ error: Yamasee.LoginError?, _ timeouts: Yamasee.SessionTimeouts?) -> Swift.Void)
  public func setOnSSORelogin(_ onSSORelogin: @escaping () -> Swift.Void)
  public func isLoggedIn() -> Swift.Bool
  public func logout()
  public var user: Yamasee.User? {
    get
  }
  public func setPrivateDistribution(_ privateDistribution: Swift.Bool)
  public func forgotPassword(userId: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: Yamasee.ForgotPasswordError?) -> Swift.Void)
  public func isNewUser(userIdOrEmail: Swift.String, completionHandler: @escaping (_ result: Swift.Bool?, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func setUserProfile(userIdOrEmail: Swift.String, password: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func isFreshUser(userIdOrEmail: Swift.String, completionHandler: @escaping (_ result: Swift.Bool?, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func otpRequest(completionHandler: @escaping (_ result: Swift.Bool?, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func otpValidate(otp: Swift.String, completionHandler: @escaping (_ result: Swift.Bool?, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func setProfile(password: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: Yamasee.LoginError?) -> Swift.Void)
  public func turbulence(with query: Yamasee.TurbulenceQuery) -> Swift.Result<Yamasee.TurbulenceResult, Yamasee.QueryError>
  public func tilesInBeam(with query: Yamasee.TilesBeamQuery) -> [Swift.String]
  @available(*, deprecated, message: "Use `turbulence(with:)` instead")
  public func getTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> Swift.String
  @available(*, deprecated, message: "Use `turbulence(with:)` instead")
  public func getTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> [Yamasee.TurbulenceItem]
  @available(*, deprecated, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> Swift.String
  @available(*, deprecated, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> [Yamasee.TurbulenceItem]
  @available(*, deprecated, message: "Use `turbulence(with:)` instead")
  public func turbulence(inTile tile: Swift.String, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, own: Swift.Bool = false) -> [Yamasee.TurbulenceItem]
  public var dataUpdatedAt: Foundation.Date? {
    get
  }
  public func fetchData()
  public var dataMode: Yamasee.DataMode {
    get
    set
  }
  public var dataHistoryTime: Yamasee.DataHistoryTime {
    get
    set
  }
  public func getTrafficJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, predict: Swift.Bool = false) -> Swift.String
  public func getTraffic(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, predict: Swift.Bool = false) -> [Yamasee.Traffic]
  public func reportWeather(type: Yamasee.WeatherType, at location: CoreLocation.CLLocation, speed: Swift.Double? = nil)
  public func getWeather(types: [Yamasee.WeatherType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.Weather]
  public func getWeather(types: [Yamasee.WeatherType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  public func getOwnWeather(types: [Yamasee.WeatherType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.Weather]
  public func getOwnWeather(types: [Yamasee.WeatherType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  public func delete(_ weather: [Yamasee.Weather])
  @available(*, deprecated, message: "Use reportWeather(type:at:) instead")
  public func reportLightning(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  @available(*, deprecated, message: "Use reportWeather(type:at:) instead")
  public func reportShear(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  @available(*, deprecated, message: "Use reportWeather(type:at:) instead")
  public func reportIcing(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  @available(*, deprecated, message: "Use getWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  @available(*, deprecated, message: "Use getWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.WeatherItem]
  @available(*, deprecated, message: "Use getWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.WeatherItem]
  @available(*, deprecated, message: "Use getWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  @available(*, deprecated, message: "Use getOwnWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getOwnWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.WeatherItem]
  @available(*, deprecated, message: "Use getOwnWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getOwnWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [Yamasee.WeatherItem]
  @available(*, deprecated, message: "Use getOwnWeather(types:altRange:timeSpan:zoomLevel:) instead")
  public func getOwnWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  @available(*, deprecated, message: "Use alerts(with:) instead.")
  public func getAlert(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (maxTurboSevAtAlt: Yamasee.TurbulenceSeverity, maxTurboSevBelow: Yamasee.TurbulenceSeverity, maxTurboSevAbove: Yamasee.TurbulenceSeverity)
  @available(*, deprecated, message: "Use alerts(with:) instead.")
  public func getAlertTiles(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (alertTilesAtAlt: [Yamasee.TurbulenceItem], alertTilesBelow: [Yamasee.TurbulenceItem], alertTilesAbove: [Yamasee.TurbulenceItem])
  @available(*, deprecated, message: "Use alerts(with:) instead.")
  public func getRouteAlerts(route: [CoreLocation.CLLocation], widthAround: Foundation.Measurement<Foundation.UnitLength> = .init(value: 0, unit: UnitLength.nauticalMiles), altitude: Foundation.Measurement<Foundation.UnitLength>, timeSpan: Swift.Int) -> (alertTilesAtAlt: [Yamasee.TurbulenceItem], alertTilesBelow: [Yamasee.TurbulenceItem], alertTilesAbove: [Yamasee.TurbulenceItem])
  public func alertedTurbulenceSeverity(_ sev: Yamasee.TurbulenceSeverity)
  public func alerts(with query: Yamasee.AlertQuery) -> Swift.Result<Yamasee.AlertResult, Yamasee.AlertError>
  public func startMonitoringAlerts(with query: Yamasee.AlertQuery? = nil)
  public func stopMonitoringAlerts()
  public var isMonitoringAlerts: Swift.Bool {
    get
  }
  public func reportBrakingAction(_ report: Yamasee.BrakingActionReport)
  public func getMyFlight(completion: @escaping (_ flight: Yamasee.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func searchFlight(byQuery query: Swift.String, completion: @escaping (_ flight: Yamasee.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func getFlight(byId id: Swift.String, completion: @escaping (_ flight: Yamasee.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func getWaypoints(for inputs: [Yamasee.FlightWaypointInput], completion: @escaping (_ response: Yamasee.RouteWaypointsTranslationResponse?, _ error: Swift.Error?) -> Swift.Void)
  public func setAircraft(_ aircraft: Swift.String?)
  public func aircraft() -> Yamasee.Aircraft?
  public func aircrafts() -> [Yamasee.Aircraft]
  public func aircraft(byId id: Swift.String) -> Yamasee.Aircraft?
  @available(*, deprecated, message: "Use setAircraft(:) instead")
  public func setAircraft(aircraft: Swift.String)
  @available(*, deprecated, message: "Use aircraft() instead")
  public func getAircraft() -> Swift.String
  @available(*, deprecated, message: "Use aircrafts() instead")
  public func getAircraftTypes() -> [Yamasee.Aircraft]
  public func airports() -> [Yamasee.Airport]
  @available(*, deprecated, message: "Use airports() instead")
  public func getAirports() -> [Yamasee.Airport]
  public func airports() -> Swift.String
  @available(*, deprecated, message: "Use airports() instead")
  public func getAirports() -> Swift.String
  public func nearestAirports(to location: CoreLocation.CLLocation, count: Swift.Int = 5) -> [Yamasee.Airport]
  @available(*, deprecated, message: "Use nearestAirports(to:) instead")
  public func getNearestAirports(to location: CoreLocation.CLLocation) -> [Yamasee.Airport]
  public func nearestAirports(to location: CoreLocation.CLLocation, count: Swift.Int = 5) -> Swift.String
  @available(*, deprecated, message: "Use nearestAirports(to:) instead")
  public func getNearestAirports(to location: CoreLocation.CLLocation) -> Swift.String
  public func addAirport(_ airport: Yamasee.Airport)
  public func getDataForAirport(withICAO icao: Swift.String, completion: @escaping (_ data: Yamasee.AirportData?, _ error: Swift.Error?) -> Swift.Void)
  public func setAngle()
  public func resetAngle()
  public func isInPosition() -> Swift.Bool
  public func isCurrentPositionSteady() -> Swift.Bool
  public func startFlight(_ flight: Yamasee.Flight)
  public func endFlight()
  public func setFlight(_ flight: Yamasee.Flight?)
  @available(*, deprecated, message: "Use `setFlight(_:)` instead")
  public func setFlightNumber(_ flightNumber: Swift.String?)
  @available(*, deprecated, message: "Use setFlightNumber(:) instead")
  public func setFlightNumber(flightNumber: Swift.String)
  public var flight: Yamasee.Flight? {
    get
  }
  public var flightPlan: Yamasee.FlightPlan? {
    get
    set
  }
  public func sendFlightLogs(fileUrl: Foundation.URL)
  public var flightPhase: Yamasee.FlightPhase {
    get
  }
  public var airborne: Swift.Bool {
    get
  }
  public func contact(email: Swift.String, message: Swift.String, logsFileUrl: Foundation.URL? = nil, completionHandler: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func setDemoDataEnabled(_ enabled: Swift.Bool)
  public func sayHello(completion: @escaping (Yamasee.Hello?, Swift.Error?) -> Swift.Void)
  public var serverSettings: Yamasee.ServerSettings? {
    get
  }
  public func acknowledgeTerms()
  public var allowsBackgroundLocationUpdates: Swift.Bool
  public var askBeforeRequestingLocationAuthorizationBlock: ((_ completion: @escaping (_ allow: Swift.Bool) -> Swift.Void) -> Swift.Bool)?
  public var version: Swift.String {
    get
  }
  public func setSimulatorMode(isLocationSimulatorOn: Swift.Bool)
  public func simulatedLocation(_ location: CoreLocation.CLLocation)
  @available(*, deprecated, message: "Use simulatedLocation(:) instead")
  public func simulatedLocation(location: CoreLocation.CLLocation)
  public func setPushSimulatedEnabled(_ enabled: Swift.Bool)
  public func simulateTurbulence(sev: Yamasee.TurbulenceSeverity)
  @available(*, deprecated, message: "Use `YMLogger.shared.enabled` instead")
  public func setLogger(isOn: Swift.Bool, errorOn: Swift.Bool = true, infoOn: Swift.Bool = true, warningOn: Swift.Bool = true, networkOn: Swift.Bool = true, onLog: ((_ message: Swift.String) -> Swift.Void)? = nil)
  @objc deinit
}
extension Yamasee.YamaseeCoreDelegate {
  public func turbulenceDetected(newTurbulence: Yamasee.TurbulenceItem)
  public func ownTurbulenceChanged()
  public func loginStatus(isLoggedIn: Swift.Bool)
  public func airborneStatus(isAirborne: Swift.Bool)
  public func locationUpdated(to location: Yamasee.YMLocation)
  public func yamaseeNewLocationUpdate(location: Yamasee.YamaseeLocation)
  public func locationManagerDidChangeAuthorization(status: CoreLocation.CLAuthorizationStatus)
  public func locationManagerDidFail(withError error: Swift.Error)
  public func newWeatherData(serverUpdateTime: Swift.Int)
  public func ownWeatherChanged()
  public func newAirportsData()
  public func serverReachabilityUpdate(isReachable: Swift.Bool)
  public func feedbackRequested(with request: Yamasee.RawDataResponseRequest, completion: @escaping (Yamasee.RawDataUserResponse?) -> Swift.Void)
  public func newDataFetchingFailed(with error: Yamasee.YSError)
  public func newAlert(_ alert: Yamasee.AlertResult)
  public func flightPhaseDidChange(to flightPhase: Yamasee.FlightPhase)
  public func flightPlanDidUpdate(to flightPlan: Yamasee.FlightPlan)
}
public enum AirportDataTrend : Swift.String, Swift.Codable {
  case negative
  case neutral
  case positive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AirportData : Swift.Codable {
  public var weather: Yamasee.AviationWeather?
  public var brakingAction: Yamasee.BrakingAction?
  public var landingDelay: Yamasee.LandingDelay?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum TurbulenceResultType {
  case server
  case own
  public static func == (a: Yamasee.TurbulenceResultType, b: Yamasee.TurbulenceResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TurbulenceQuery {
  public let type: Yamasee.TurbulenceResultType
  public let timeSpan: Swift.Int
  public let altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>
  public let resultOptions: Yamasee.TurbulenceResultOptions
  public var excludeTiles: [Swift.String]?
  public var aggregate: Swift.Bool
  public var coordinates: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Foundation.Measurement<Foundation.UnitLength>?
  public var tiles: [Swift.String]?
  public init(type: Yamasee.TurbulenceResultType, timeSpan: Swift.Int, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, resultOptions: Yamasee.TurbulenceResultOptions, excludeTiles: [Swift.String]? = nil, aggregate: Swift.Bool = true, coordinates: [CoreLocation.CLLocationCoordinate2D]? = nil, widthAround: Foundation.Measurement<Foundation.UnitLength>? = nil, tiles: [Swift.String]? = nil)
}
public struct TurbulenceResultOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let items: Yamasee.TurbulenceResultOptions
  public static let geoJSON: Yamasee.TurbulenceResultOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = Yamasee.TurbulenceResultOptions
  public typealias Element = Yamasee.TurbulenceResultOptions
  public typealias RawValue = Swift.Int
}
public struct RawDataUserResponse : Swift.Codable {
  public let confirmed: Swift.Bool
  public let suggestedLevel: Yamasee.TurbulenceSeverity?
  public init(confirmed: Swift.Bool, suggestedLevel: Yamasee.TurbulenceSeverity?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(*, deprecated, message: "Use `Aircraft` instead")
public typealias YamaseeAircraftType = Yamasee.Aircraft
public enum AircraftSize : Swift.String, Swift.Codable {
  case small
  case medium
  case large
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Aircraft : Swift.Codable {
  public var aircraft: Swift.String
  public var description: Swift.String
  public var size: Yamasee.AircraftSize
  public var icao: Swift.String?
  public var iata: Swift.String?
  public var group: Swift.String?
  public var family: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
extension Yamasee.Aircraft {
  public init(from decoder: Swift.Decoder) throws
}
public struct MapGrid {
  public static func mapGridGeoJSON(stepDegrees: CoreLocation.CLLocationDegrees) -> Swift.String
}
public struct FlightPhase : Swift.Codable {
  public var type: Yamasee.FlightPhaseType
  public var location: CoreLocation.CLLocation
  public var updatedAt: Foundation.Date
  public init(type: Yamasee.FlightPhaseType, location: CoreLocation.CLLocation)
  public static func none() -> Yamasee.FlightPhase
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum FlightPhaseType : Swift.String, Swift.Codable {
  case none
  case taxiing
  case takeoff
  case climb
  case cruise
  case descent
  case landing
  case landed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GeoUtils {
  public static func alt2TileAlt(alt: Swift.Double) -> Swift.Int
  public static func tileAlt2Alt(tileAlt: Swift.Int) -> Swift.Double
}
extension Yamasee.GeoUtils {
  public static func boundingCoordinates(forTileX tileX: Swift.Int, tileY: Swift.Int) -> [CoreLocation.CLLocationCoordinate2D]
  public static func boundingCoordinatesCenter(forTileX tileX: Swift.Int, tileY: Swift.Int) -> CoreLocation.CLLocationCoordinate2D
}
extension Foundation.NSNotification.Name {
  public static let yamaseeDidUpdateSettings: Foundation.Notification.Name
}
extension Foundation.NSError {
  public var isNoConnectionError: Swift.Bool {
    get
  }
  public static var noConnectionCodes: [Swift.Int] {
    get
  }
  public var isServiceUnavailableError: Swift.Bool {
    get
  }
  public static var serviceUnavailableCodes: [Swift.Int] {
    get
  }
}
public struct CodableLocation : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum GeneralError : Yamasee.YSError {
  case internetConnectionAppearsOffline
  case tooManyRequests
  case apiKeyInvalid
  case upgradeRequired(message: Swift.String?)
  case notLoggedIn
  case other(error: Swift.Error?)
}
@available(*, deprecated, message: "Use `WeatherType` instead")
public typealias WXType = Yamasee.WeatherType
@available(*, deprecated, message: "Use `Weather` instead")
public typealias WeatherItem = Yamasee.Weather
public enum WeatherType : Swift.String, Swift.Codable {
  case cb
  case lightning
  case icing
  case shear
  case mwave
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Weather : Swift.Equatable, Swift.Codable {
  public var id: Swift.String?
  public var ts: Swift.Int
  public var type: Yamasee.WeatherType
  public var tileX: Swift.Int
  public var tileY: Swift.Int
  public var alt: Swift.Int?
  public var altFeet: Swift.Double?
  public var repId: Swift.String?
  public var fNum: Swift.String?
  public var speed: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
  public init(type: Yamasee.WeatherType, lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>, simulated: Swift.Bool?, repId: Swift.String, fNum: Swift.String?)
  public static func == (a: Yamasee.Weather, b: Yamasee.Weather) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
extension Yamasee.Weather {
  public var coordinates: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
  public var center: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public struct FlightWaypointInput : Swift.Codable {
  public var waypoint_id: Swift.String
  public var name: Swift.String?
  public var latitude: Swift.Double?
  public var longitude: Swift.Double?
  public var id: Swift.Int?
  public var custom: Swift.Bool
  public init(waypoint_id: Swift.String, name: Swift.String?, latitude: Swift.Double?, longitude: Swift.Double?, id: Swift.Int?, custom: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LandingDelay : Swift.Codable {
  public var trend: Yamasee.AirportDataTrend
  public var reports: [Yamasee.LandingTimeReport]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TilesBeamQuery {
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public let heading: Foundation.Measurement<Foundation.UnitAngle>
  public let distance: Foundation.Measurement<Foundation.UnitLength>
  public let angleSpan: Foundation.Measurement<Foundation.UnitAngle>?
  public let widthAround: Foundation.Measurement<Foundation.UnitLength>?
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, heading: Foundation.Measurement<Foundation.UnitAngle>, distance: Foundation.Measurement<Foundation.UnitLength>, angleSpan: Foundation.Measurement<Foundation.UnitAngle>? = nil, widthAround: Foundation.Measurement<Foundation.UnitLength>? = nil)
}
public struct Traffic : Swift.Encodable {
  public var lat: Swift.Double
  public var lng: Swift.Double
  public var alt: Swift.Double
  public var hdg: Swift.Double
  public var ts: Swift.Int
  public var uuid: Swift.String
  public var airplane: Swift.String
  public var speed: Swift.Double
  public var fNum: Swift.String
  public var aircraftSize: Yamasee.AircraftSize
  public var companyId: Swift.String
  public var fNumInsertedManually: Swift.Bool?
  public var tile: Yamasee.Tile
  public func encode(to encoder: Swift.Encoder) throws
}
extension Yamasee.Traffic : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension Yamasee.Traffic {
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public enum Environment {
  case development
  case production
  public static func == (a: Yamasee.Environment, b: Yamasee.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Yamasee.TurbulenceSeverity : Swift.Hashable {}
extension Yamasee.TurbulenceSeverity : Swift.RawRepresentable {}
extension Yamasee.BrakingActionLevel : Swift.Equatable {}
extension Yamasee.BrakingActionLevel : Swift.Hashable {}
extension Yamasee.BrakingActionLevel : Swift.RawRepresentable {}
extension Yamasee.DataMode : Swift.Equatable {}
extension Yamasee.DataMode : Swift.Hashable {}
extension Yamasee.DataMode : Swift.RawRepresentable {}
extension Yamasee.AlertResultType : Swift.Equatable {}
extension Yamasee.AlertResultType : Swift.Hashable {}
extension Yamasee.YMLocationState : Swift.Equatable {}
extension Yamasee.YMLocationState : Swift.Hashable {}
extension Yamasee.YMStaticContentType : Swift.Equatable {}
extension Yamasee.YMStaticContentType : Swift.Hashable {}
extension Yamasee.DataHistoryTime : Swift.Equatable {}
extension Yamasee.DataHistoryTime : Swift.Hashable {}
extension Yamasee.DataHistoryTime : Swift.RawRepresentable {}
extension Yamasee.AirportDataTrend : Swift.Equatable {}
extension Yamasee.AirportDataTrend : Swift.Hashable {}
extension Yamasee.AirportDataTrend : Swift.RawRepresentable {}
extension Yamasee.TurbulenceResultType : Swift.Equatable {}
extension Yamasee.TurbulenceResultType : Swift.Hashable {}
extension Yamasee.AircraftSize : Swift.Equatable {}
extension Yamasee.AircraftSize : Swift.Hashable {}
extension Yamasee.AircraftSize : Swift.RawRepresentable {}
extension Yamasee.FlightPhaseType : Swift.Equatable {}
extension Yamasee.FlightPhaseType : Swift.Hashable {}
extension Yamasee.FlightPhaseType : Swift.RawRepresentable {}
extension Yamasee.WeatherType : Swift.Equatable {}
extension Yamasee.WeatherType : Swift.Hashable {}
extension Yamasee.WeatherType : Swift.RawRepresentable {}
extension Yamasee.Environment : Swift.Equatable {}
extension Yamasee.Environment : Swift.Hashable {}
