// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SkyPathSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CFNetwork
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreGraphics
import CoreLocation
import CoreMotion
import CryptoKit
import Foundation
import GameKit
import MapKit
import Network
import NetworkExtension
@_exported import SkyPathSDK
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
public struct TurbulencePolygonsQuery {
  public let altRange: Swift.ClosedRange<Swift.Double>
  public let resultOptions: SkyPathSDK.TurbulencePolygonsResultOptions
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime?
  public var sevs: [SkyPathSDK.TurbulenceSeverity]?
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public init(altRange: Swift.ClosedRange<Swift.Double> = 0...52000, resultOptions: SkyPathSDK.TurbulencePolygonsResultOptions = .geoJSON, dataHistoryTime: SkyPathSDK.DataHistoryTime? = nil)
}
public enum AlertError : SkyPathSDK.SPError {
  case invalidCoordinates
  case invalidPolygon
  case altRangeNotRoundToThousandFeet
  case general(error: SkyPathSDK.GeneralError)
}
public enum ForgotPasswordError : SkyPathSDK.SPError {
  case userIdInvalid
  case general(error: SkyPathSDK.GeneralError)
}
public enum DataUpdateFrequency : Swift.String, Swift.Codable {
  case none
  case minimal
  case medium
  case fast
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TurbulenceSeverity : Swift.Int, Swift.Equatable, Swift.Comparable, Swift.Codable, Swift.CaseIterable {
  case none
  case light
  case lightModerate
  case moderate
  case moderateSevere
  public init?(rawValue: Swift.Int)
  public static var allCases: [SkyPathSDK.TurbulenceSeverity] {
    get
  }
  @available(*, unavailable, renamed: "none")
  case None
  @available(*, unavailable, renamed: "light")
  case Light
  @available(*, unavailable, renamed: "lightModerate")
  case LightModarate
  @available(*, unavailable, renamed: "moderate")
  case Moderate
  @available(*, unavailable, renamed: "moderateSevere")
  case ModerateSevere
  @available(*, unavailable, message: "`moderateSevere` is the most severe")
  case Severe
  @available(*, unavailable, message: "`moderateSevere` is the most severe")
  case severe
  public var color: UIKit.UIColor {
    get
  }
  public var borderColor: UIKit.UIColor {
    get
  }
  public var colorOpacity: CoreFoundation.CGFloat {
    get
  }
  public var colorWithOpacity: UIKit.UIColor {
    get
  }
  public static func < (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func <= (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func > (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func >= (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public typealias AllCases = [SkyPathSDK.TurbulenceSeverity]
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TurbulenceTrend : Swift.String, Swift.Codable {
  case better
  case worse
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Tile : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public var h3Hex: Swift.String
  public var alt: Swift.Int
  public var key: Swift.String {
    get
  }
  public var keyByCoord: Swift.String {
    get
  }
  public var altMetersRange: Swift.ClosedRange<Swift.Double> {
    get
  }
  public init(h3Hex: Swift.String, alt: Swift.Int?)
  public init(key: Swift.String)
  public init(coord: CoreLocation.CLLocationCoordinate2D, alt: Swift.Int? = nil)
  public static func == (a: SkyPathSDK.Tile, b: SkyPathSDK.Tile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SPLocalNotificationManager : ObjectiveC.NSObject {
  public static let shared: SkyPathSDK.SPLocalNotificationManager
  public func checkNotificationSettings(completion: ((_ status: UserNotifications.UNAuthorizationStatus) -> Swift.Void)? = nil)
  @discardableResult
  public func scheduleNotification(title: Swift.String, body: Swift.String, sound: Swift.String? = "default", soundEnabled: Swift.Bool = true, contentCategoryIdentifier: Swift.String? = nil, timeInterval: Foundation.TimeInterval = 1, identifier: Swift.String = UUID().uuidString, userInfo: [Swift.String : Any]? = nil) -> Swift.String
  @discardableResult
  public func scheduleNotification(content: UserNotifications.UNNotificationContent, timeInterval: Foundation.TimeInterval = 1, identifier: Swift.String = UUID().uuidString) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@available(*, unavailable, renamed: "SkyPathDelegate")
public protocol YamaseeCoreDelegate : AnyObject {
}
extension SkyPathSDK.SkyPath {
  @available(*, unavailable, renamed: "stop()")
  public func logout()
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> Swift.String
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> Swift.String
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func turbulence(inTile tile: Swift.String, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, own: Swift.Bool = false) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getAlert(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (maxTurboSevAtAlt: SkyPathSDK.TurbulenceSeverity, maxTurboSevBelow: SkyPathSDK.TurbulenceSeverity, maxTurboSevAbove: SkyPathSDK.TurbulenceSeverity)
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getAlertTiles(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (alertTilesAtAlt: [SkyPathSDK.TurbulenceItem], alertTilesBelow: [SkyPathSDK.TurbulenceItem], alertTilesAbove: [SkyPathSDK.TurbulenceItem])
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getRouteAlerts(route: [CoreLocation.CLLocation], widthAround: Foundation.Measurement<Foundation.UnitLength> = .init(value: 0, unit: UnitLength.nauticalMiles), altitude: Foundation.Measurement<Foundation.UnitLength>, timeSpan: Swift.Int) -> (alertTilesAtAlt: [SkyPathSDK.TurbulenceItem], alertTilesBelow: [SkyPathSDK.TurbulenceItem], alertTilesAbove: [SkyPathSDK.TurbulenceItem])
  @available(*, unavailable, message: "Use setAircraft(:) instead")
  public func setAircraft(aircraft: Swift.String)
  @available(*, unavailable, message: "Use aircraft() instead")
  public func getAircraft() -> Swift.String
  @available(*, unavailable, message: "Use aircrafts() instead")
  public func getAircraftTypes() -> [SkyPathSDK.Aircraft]
  @available(*, unavailable, message: "Use `startFlight(_:)` instead")
  public func setFlightNumber(_ flightNumber: Swift.String?)
  @available(*, unavailable, message: "Use `startFlight(_:)` instead")
  public func setFlightNumber(flightNumber: Swift.String)
  @available(*, unavailable, renamed: "simulatedLocation(_:)")
  public func simulatedLocation(location: CoreLocation.CLLocation)
  @available(*, unavailable, message: "Use `dataUpdateFrequency` instead")
  public var dataMode: SkyPathSDK.SkyPath.DataMode {
    get
    set
  }
  @available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
  public enum DataMode {
    case `default`
    public static func == (a: SkyPathSDK.SkyPath.DataMode, b: SkyPathSDK.SkyPath.DataMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, unavailable, message: "Use `aircraft` instead")
  public func setAircraft(_ aircraft: Swift.String?)
  @available(*, unavailable, message: "Use `start(withUserId:companyId:apiKey:env)` instead")
  public func start(apiKey: Swift.String, baseUrl: Swift.String, env: SkyPathSDK.Environment? = nil)
  @available(*, unavailable, message: "Use `start(withUserId:companyId:apiKey:env)` instead")
  public func partnerLogin(userId: Swift.String, companyId: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.SkyPath.PartnerLoginError?) -> Swift.Void)
  @available(*, unavailable, message: "Use `LoginError` instead")
  public enum PartnerLoginError {
  }
  @available(*, unavailable, renamed: "enableSimulation(_:)")
  public func setSimulatorMode(isLocationSimulatorOn: Swift.Bool)
  @available(*, unavailable, renamed: "enablePushSimulated(_:)")
  public func setPushSimulatedEnabled(_ enabled: Swift.Bool)
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func setAngle()
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func resetAngle()
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func isInPosition() -> Swift.Bool
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func isCurrentPositionSteady() -> Swift.Bool
  @available(*, unavailable, renamed: "didReceiveAlert(_:)")
  public func newAlert(_ alert: SkyPathSDK.AlertResult)
  @available(*, unavailable, message: "Use `turbulencePolygons(with:)` instead")
  public var turbulencePolygons: Swift.String? {
    get
  }
  @available(*, unavailable, message: "Use `setFlight(_:)` instead")
  public func startFlight(_ flight: SkyPathSDK.Flight)
  @available(*, unavailable, message: "Use `setFlight(_:)` instead")
  public func endFlight()
}
@available(*, unavailable, renamed: "Aircraft")
public struct YamaseeAircraftType {
}
@available(*, unavailable, renamed: "SPLocation")
public struct YamaseeLocation {
}
@available(*, unavailable, renamed: "SPLocationState")
public enum YamaseeLocationState {
}
@available(*, unavailable, renamed: "SPLocation")
public struct YMLocation {
}
@available(*, unavailable, renamed: "SPLocationState")
public enum YMLocationState {
}
@available(*, unavailable, renamed: "SPError")
public protocol YSError : Swift.Error {
}
@available(*, unavailable, renamed: "StartError")
public enum LoginError : Swift.Error {
  case general(error: SkyPathSDK.GeneralError)
}
@available(*, unavailable, renamed: "WeatherType")
public enum WXType {
}
@available(*, unavailable, renamed: "Weather")
public struct WeatherItem {
}
extension SkyPathSDK.SkyPathDelegate {
  @available(*, unavailable, message: "Use `didReceiveNewTurbulenceData()` instead")
  public func newTurbulenceData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `detectedTurbulence(_:)` instead")
  public func turbulenceDetected(newTurbulence: SkyPathSDK.TurbulenceItem)
  @available(*, unavailable, message: "Use `didReceiveNewTrafficData()` instead")
  public func newTrafficData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `didReceiveNewWeatherData()` instead")
  public func newWeatherData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `didReceiveNewAirportsData()` instead")
  public func newAirportsData()
  @available(*, unavailable, message: "Use `didChangeDevicePosition(_:horizontal:)` instead")
  public func deviceAngleStatusChanged(isInAngle: Swift.Bool)
}
public protocol SkyPathDelegate : AnyObject {
  func didUpdateRecordingStatus(to recording: Swift.Bool)
  func didReceiveNewTurbulenceData(areaType: SkyPathSDK.DataAreaType)
  func detectedTurbulence(_ turbulence: SkyPathSDK.TurbulenceItem)
  func didReceiveNewTurbulencePolygons()
  func didReceiveNewTrafficData()
  func didFailToFetchNewData(with error: SkyPathSDK.SPError)
  func didReceiveAlert(_ alert: SkyPathSDK.AlertResult)
  func locationManagerDidFail(withError error: Swift.Error)
  func serverReachabilityUpdated(to isReachable: Swift.Bool)
  func didChangeDevicePosition(_ inPosition: Swift.Bool, horizontal: Swift.Bool)
  func didUpdateLowPowerMode(_ lowPowerMode: Swift.Bool)
  func didUpdateFetchingStatus(to fetching: Swift.Bool, areaType: SkyPathSDK.DataAreaType)
}
extension SkyPathSDK.SkyPathDelegate {
  public func detectedTurbulence(_ turbulence: SkyPathSDK.TurbulenceItem)
  public func didReceiveNewTurbulencePolygons()
  public func didReceiveNewTrafficData()
  public func didFailToFetchNewData(with error: SkyPathSDK.SPError)
  public func didReceiveAlert(_ alert: SkyPathSDK.AlertResult)
  public func locationManagerDidFail(withError error: Swift.Error)
  public func serverReachabilityUpdated(to isReachable: Swift.Bool)
  public func didUpdateLowPowerMode(_ lowPowerMode: Swift.Bool)
  public func didUpdateFetchingStatus(to fetching: Swift.Bool, areaType: SkyPathSDK.DataAreaType)
}
public enum LoggingLevel {
  case verbose
  case debug
  case info
  case warn
  case error
  public static func == (a: SkyPathSDK.LoggingLevel, b: SkyPathSDK.LoggingLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Logger {
  public var enabled: Swift.Bool {
    get
    set
  }
  public var level: SkyPathSDK.LoggingLevel {
    get
    set
  }
  public var rollingFrequency: Swift.Double {
    get
    set
  }
  public var maximumNumberOfLogFiles: Swift.Int {
    get
    set
  }
  public var logsDirectory: Foundation.URL {
    get
  }
  @objc deinit
  public func exportLogs(notifyOnQueue: Dispatch.DispatchQueue = .main, completion: @escaping (_ fileUrl: Foundation.URL?, _ error: Swift.Error?) -> Swift.Void)
  public func exportedLogs() -> (fileUrl: Foundation.URL?, error: Swift.Error?)
}
public struct TurbulenceItem : Swift.Codable, Swift.Equatable {
  public let sev: SkyPathSDK.TurbulenceSeverity
  public let vertices: [CoreLocation.CLLocationCoordinate2D]
  public let tile: SkyPathSDK.Tile
  public let alt: Swift.Double
  public let ts: Swift.Int
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public var h3Hex: Swift.String
  public var trend: SkyPathSDK.TurbulenceTrend?
  public var distanceTo: CoreLocation.CLLocationDistance? {
    get
  }
  public var timeTo: Foundation.TimeInterval? {
    get
  }
  public var timeToPass: Foundation.TimeInterval? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: SkyPathSDK.TurbulenceItem, rhs: SkyPathSDK.TurbulenceItem) -> Swift.Bool
}
extension SkyPathSDK.TurbulenceItem {
  @available(*, unavailable, renamed: "vertices")
  public var bbox: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
}
extension CoreLocation.CLError.Code : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum StartError : SkyPathSDK.SPError {
  case apiKeyInvalid
  case envInvalid
  case userIdOrAirlineInvalid
  @available(*, deprecated, renamed: "unathorized")
  case userIdOrPasswordInvalid
  case unauthorized(message: Swift.String)
  case userLocked(message: Swift.String)
  case ssoInvalid
  case ssoDisabledInPublic
  case weakPassword
  case general(error: SkyPathSDK.GeneralError)
}
extension Swift.Array where Element == SkyPathSDK.TurbulenceItem {
  public func geoJSON(withType type: SkyPathSDK.TurbulenceResultType) -> Swift.String
}
public struct DataTypeOptions : Swift.OptionSet, Swift.Hashable {
  public let rawValue: Swift.Int
  public static let turbulence: SkyPathSDK.DataTypeOptions
  public static let turbulencePolygons: SkyPathSDK.DataTypeOptions
  public static let traffic: SkyPathSDK.DataTypeOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SkyPathSDK.DataTypeOptions
  public typealias Element = SkyPathSDK.DataTypeOptions
  public typealias RawValue = Swift.Int
}
extension CoreLocation.CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct AlertQuery {
  public var minSev: SkyPathSDK.TurbulenceSeverity
  public var sevs: [SkyPathSDK.TurbulenceSeverity]?
  public let distance: Swift.Double
  public var timeFrame: Foundation.TimeInterval?
  public let angleSpan: Swift.Double
  public let altRange: Swift.ClosedRange<Swift.Double>?
  public let switchToBeamOnDistanceFromRoute: Swift.Double
  public let excludeOwnTimeSpan: Swift.Int
  public var route: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Swift.Double?
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public var tiles: [Swift.String]?
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime?
  public var usePolygonsEnabled: Swift.Bool
  public init(minSev: SkyPathSDK.TurbulenceSeverity = .light, sevs: [SkyPathSDK.TurbulenceSeverity]? = nil, distance: Swift.Double = 100, timeFrame: Foundation.TimeInterval? = nil, angleSpan: Swift.Double = 15, altRange: Swift.ClosedRange<Swift.Double>? = nil, route: [CoreLocation.CLLocationCoordinate2D]? = nil, widthAround: Swift.Double? = 20, switchToBeamOnDistanceFromRoute: Swift.Double = 20, excludeOwnTimeSpan: Swift.Int = 60, dataHistoryTime: SkyPathSDK.DataHistoryTime? = nil)
}
public struct DataQuery {
  public var types: SkyPathSDK.DataTypeOptions
  public var sevs: [SkyPathSDK.TurbulenceSeverity]
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public var viewport: [CoreLocation.CLLocationCoordinate2D]?
  public var globalEnabled: Swift.Bool
  public var globalTurbulencePolygonsUpToEnabled: Swift.Bool
  public init(types: SkyPathSDK.DataTypeOptions = .turbulence, sevs: [SkyPathSDK.TurbulenceSeverity] = TurbulenceSeverity.allCases, polygon: [CoreLocation.CLLocationCoordinate2D]? = nil)
}
public enum AlertResultType {
  case none
  case coordinates
  case polygon
  case beam
  case tiles
  public static func == (a: SkyPathSDK.AlertResultType, b: SkyPathSDK.AlertResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertResult : Swift.Equatable {
  public var turbulence: [SkyPathSDK.TurbulenceItem]
  public var type: SkyPathSDK.AlertResultType
  public var tiles: [Swift.String]
  public static func == (lhs: SkyPathSDK.AlertResult, rhs: SkyPathSDK.AlertResult) -> Swift.Bool
}
public class TurbulenceClusterer {
  public struct Options {
    public let maxDistanceNM: Swift.Double
    public let maxDistanceToNearestNM: Swift.Double
    public init(maxDistanceNM: Swift.Double = 60, maxDistanceToNearestNM: Swift.Double = 30)
  }
  public var clusters: [SkyPathSDK.TurbulenceCluster] {
    get
  }
  public init(options: SkyPathSDK.TurbulenceClusterer.Options = .init())
  public func process(turbulence: [SkyPathSDK.TurbulenceItem])
  public func isAlerted(cluster: SkyPathSDK.TurbulenceCluster) -> Swift.Bool
  public func alerted(cluster: SkyPathSDK.TurbulenceCluster)
  public func reset()
  @objc deinit
}
public class TurbulenceCluster : Swift.Equatable, Swift.Hashable {
  public var id: Swift.String
  public var turbulence: [SkyPathSDK.TurbulenceItem] {
    get
  }
  public var center: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var severity: SkyPathSDK.TurbulenceSeverity {
    get
  }
  public var diameterDistance: Swift.Double {
    get
  }
  public var distanceTo: CoreLocation.CLLocationDistance? {
    get
  }
  public var timeTo: Foundation.TimeInterval? {
    get
  }
  public var timeToPass: Foundation.TimeInterval? {
    get
  }
  public var description: Swift.String {
    get
  }
  public var nearestMaxSevTurbulence: SkyPathSDK.TurbulenceItem? {
    get
  }
  public var nearestMaxSevCenter: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public init()
  convenience public init(turbulence: [SkyPathSDK.TurbulenceItem])
  public static func == (lhs: SkyPathSDK.TurbulenceCluster, rhs: SkyPathSDK.TurbulenceCluster) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public struct Flight : Swift.Codable {
  public let dep: Swift.String
  public let dest: Swift.String
  public let fnum: Swift.String
  public var fnumManual: Swift.Bool?
  public init(dep: Swift.String = "", dest: Swift.String = "", fnum: Swift.String, fnumManual: Swift.Bool? = true)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SPLocation : Swift.Codable {
  public let location: CoreLocation.CLLocation?
  public let state: SkyPathSDK.SPLocationState
  public let error: Swift.Error?
  public var pressureAlt: Swift.Double?
  public var pressureAltRaw: Swift.Double?
  public var altitude: CoreLocation.CLLocationDistance? {
    get
  }
  public var calculatedSpeed: CoreLocation.CLLocationSpeed?
  public var verticalSpeed: CoreLocation.CLLocationSpeed?
  public var speed: CoreLocation.CLLocationSpeed? {
    get
  }
  public var source: SkyPathSDK.SPLocationSource {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DataHistoryTime : Swift.Double, Swift.Codable, Swift.CaseIterable {
  case halfHour
  case hour
  case twoHours
  case fourHours
  case sixHours
  public init(mins: Swift.Int)
  public init?(rawValue: Swift.Double)
  public typealias AllCases = [SkyPathSDK.DataHistoryTime]
  public typealias RawValue = Swift.Double
  public static var allCases: [SkyPathSDK.DataHistoryTime] {
    get
  }
  public var rawValue: Swift.Double {
    get
  }
}
public enum QueryError : SkyPathSDK.SPError {
  case altRangeNotRoundToThousandFeet
  case polygonTooManyCoordinates
  case dataQueryInvalid(message: Swift.String?)
  case general(error: SkyPathSDK.GeneralError)
}
public protocol SPError : Swift.Error {
}
public struct TurbulenceResult {
  public var items: [SkyPathSDK.TurbulenceItem]
  public var geoJSON: Swift.String
}
@_hasMissingDesignatedInitializers public class SkyPath {
  public static let shared: SkyPathSDK.SkyPath
  weak public var delegate: SkyPathSDK.SkyPathDelegate?
  public func start(apiKey: Swift.String, airline: Swift.String, userId: Swift.String, env: SkyPathSDK.Environment? = nil, completion: @escaping (_ error: SkyPathSDK.StartError?) -> Swift.Void)
  public var isStarted: Swift.Bool {
    get
  }
  public func stop()
  public var dataQuery: SkyPathSDK.DataQuery {
    get
    set
  }
  public var dataUpdateFrequency: SkyPathSDK.DataUpdateFrequency {
    get
    set
  }
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime {
    get
    set
  }
  public var dataUpdatedAt: Foundation.Date? {
    get
  }
  public func fetchData(refresh: Swift.Bool = false)
  public func fetchingStatus(for areaType: SkyPathSDK.DataAreaType) -> Swift.Bool
  public func turbulence(with query: SkyPathSDK.TurbulenceQuery) -> Swift.Result<SkyPathSDK.TurbulenceResult, SkyPathSDK.QueryError>
  public func turbulencePolygons(with query: SkyPathSDK.TurbulencePolygonsQuery) -> Swift.Result<SkyPathSDK.TurbulencePolygonsResult, SkyPathSDK.QueryError>
  public func getTrafficJson(altRange: Swift.ClosedRange<Swift.Double>, predict: Swift.Bool = false) -> Swift.String
  public func getTraffic(altRange: Swift.ClosedRange<Swift.Double>, predict: Swift.Bool = false) -> [SkyPathSDK.Traffic]
  public func alerts(with query: SkyPathSDK.AlertQuery = AlertQuery()) -> Swift.Result<SkyPathSDK.AlertResult, SkyPathSDK.AlertError>
  public func startMonitoringAlerts(with query: SkyPathSDK.AlertQuery = AlertQuery())
  public func stopMonitoringAlerts()
  public var isMonitoringAlerts: Swift.Bool {
    get
  }
  public var aircraft: SkyPathSDK.Aircraft? {
    get
    set
  }
  public func aircrafts() -> [SkyPathSDK.Aircraft]
  public func aircraft(byId id: Swift.String) -> SkyPathSDK.Aircraft?
  public func setFlight(_ flight: SkyPathSDK.Flight?)
  public var flight: SkyPathSDK.Flight? {
    get
  }
  public var allowsBackgroundLocationUpdates: Swift.Bool {
    get
    set
  }
  public var version: Swift.String {
    get
  }
  public var env: SkyPathSDK.Environment? {
    get
  }
  public var inPosition: Swift.Bool {
    get
  }
  public var isHorizontal: Swift.Bool {
    get
  }
  public var inNoise: Swift.Bool {
    get
  }
  public var logger: SkyPathSDK.Logger {
    get
  }
  public func enableSimulation(_ enabled: Swift.Bool)
  public func simulatedLocation(_ location: CoreLocation.CLLocation)
  public func enablePushSimulated(_ enabled: Swift.Bool)
  public func simulateTurbulence(sev: SkyPathSDK.TurbulenceSeverity)
  public func simulateBadLocation(_ enabled: Swift.Bool)
  public var simulateBadLocation: Swift.Bool {
    get
  }
  @objc deinit
}
public struct TurbulenceQuery {
  public let type: SkyPathSDK.TurbulenceResultType
  public let altRange: Swift.ClosedRange<Swift.Double>?
  public let resultOptions: SkyPathSDK.TurbulenceResultOptions
  public var aggregate: Swift.Bool
  public var tiles: [Swift.String]?
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime?
  public var sevs: [SkyPathSDK.TurbulenceSeverity]?
  public var route: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Swift.Double?
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public var usePolygonsEnabled: Swift.Bool
  public init(type: SkyPathSDK.TurbulenceResultType = .server, altRange: Swift.ClosedRange<Swift.Double>? = nil, resultOptions: SkyPathSDK.TurbulenceResultOptions = .geoJSON, aggregate: Swift.Bool = true, tiles: [Swift.String]? = nil, dataHistoryTime: SkyPathSDK.DataHistoryTime? = nil)
}
public enum SPLocationSource {
  case deviceGPS
  case externalGPS
  case adsb
  public var title: Swift.String {
    get
  }
  public static func == (a: SkyPathSDK.SPLocationSource, b: SkyPathSDK.SPLocationSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AircraftSize : Swift.String, Swift.Codable {
  case small
  case medium
  case large
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Aircraft : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var title: Swift.String
  public var size: SkyPathSDK.AircraftSize
  public var icao: Swift.String?
  public var iata: Swift.String?
  public var family: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  @available(*, unavailable, renamed: "id")
  public var aircraft: Swift.String?
  @available(*, unavailable, renamed: "title")
  public var description: Swift.String?
  public static func == (a: SkyPathSDK.Aircraft, b: SkyPathSDK.Aircraft) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TurbulenceResultType {
  case server
  case serverExcludeOwn(timeSpan: Swift.Int)
  case own(timeSpan: Swift.Int)
}
public enum DataAreaType {
  case global
  case route
  case viewport
  case all
  public static func == (a: SkyPathSDK.DataAreaType, b: SkyPathSDK.DataAreaType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GeneralError : SkyPathSDK.SPError {
  case internetConnectionAppearsOffline
  case tooManyRequests
  case upgradeRequired(message: Swift.String?)
  case notStarted
  case noLocation
  case noError
  case other(error: Swift.Error?)
}
public struct TurbulencePolygonsResultOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let geoJSON: SkyPathSDK.TurbulencePolygonsResultOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SkyPathSDK.TurbulencePolygonsResultOptions
  public typealias Element = SkyPathSDK.TurbulencePolygonsResultOptions
  public typealias RawValue = Swift.Int
}
public enum SPLocationState : Swift.Codable {
  case good
  case dr
  case none
  case external
  case externalDr
  public static func == (a: SkyPathSDK.SPLocationState, b: SkyPathSDK.SPLocationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct TurbulenceResultOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let items: SkyPathSDK.TurbulenceResultOptions
  public static let geoJSON: SkyPathSDK.TurbulenceResultOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SkyPathSDK.TurbulenceResultOptions
  public typealias Element = SkyPathSDK.TurbulenceResultOptions
  public typealias RawValue = Swift.Int
}
public struct TurbulencePolygonsResult {
  public var geoJSON: Swift.String
}
public struct Traffic : Swift.Codable, Swift.Hashable {
  public var lat: Swift.Double
  public var lng: Swift.Double
  public var alt: Swift.Double
  public var baroAlt: Swift.Double?
  public var spAlt: Swift.Int
  public var spBaroAlt: Swift.Int?
  public var hdg: Swift.Double
  public var spdNmH: Swift.Double
  public var ts: Swift.Int
  public var user: Swift.String
  public var companyId: Swift.String
  public var aircraftCat: Swift.String
  public var airplane: Swift.String
  public var aircraftSize: SkyPathSDK.AircraftSize
  public var fNum: Swift.String
  public var fNumInsertedManually: Swift.Bool?
  public var dest: Swift.String
  public var dep: Swift.String
  public var spFlightId: Swift.String
  public var tile: SkyPathSDK.Tile
  public var speed: Swift.Double
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var altFtUsingCurType: Swift.Double {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SkyPathSDK.Traffic, b: SkyPathSDK.Traffic) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public enum Environment : Swift.Codable {
  case dev(serverUrl: Swift.String?)
  case staging(serverUrl: Swift.String?)
  case prod(serverUrl: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.DataUpdateFrequency : Swift.Equatable {}
extension SkyPathSDK.DataUpdateFrequency : Swift.Hashable {}
extension SkyPathSDK.DataUpdateFrequency : Swift.RawRepresentable {}
extension SkyPathSDK.TurbulenceSeverity : Swift.Hashable {}
extension SkyPathSDK.TurbulenceSeverity : Swift.RawRepresentable {}
extension SkyPathSDK.TurbulenceTrend : Swift.Equatable {}
extension SkyPathSDK.TurbulenceTrend : Swift.Hashable {}
extension SkyPathSDK.TurbulenceTrend : Swift.RawRepresentable {}
@available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
extension SkyPathSDK.SkyPath.DataMode : Swift.Equatable {}
@available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
extension SkyPathSDK.SkyPath.DataMode : Swift.Hashable {}
extension SkyPathSDK.LoggingLevel : Swift.Equatable {}
extension SkyPathSDK.LoggingLevel : Swift.Hashable {}
extension SkyPathSDK.AlertResultType : Swift.Equatable {}
extension SkyPathSDK.AlertResultType : Swift.Hashable {}
extension SkyPathSDK.DataHistoryTime : Swift.Equatable {}
extension SkyPathSDK.DataHistoryTime : Swift.Hashable {}
extension SkyPathSDK.DataHistoryTime : Swift.RawRepresentable {}
extension SkyPathSDK.SPLocationSource : Swift.Equatable {}
extension SkyPathSDK.SPLocationSource : Swift.Hashable {}
extension SkyPathSDK.AircraftSize : Swift.Equatable {}
extension SkyPathSDK.AircraftSize : Swift.Hashable {}
extension SkyPathSDK.AircraftSize : Swift.RawRepresentable {}
extension SkyPathSDK.DataAreaType : Swift.Equatable {}
extension SkyPathSDK.DataAreaType : Swift.Hashable {}
extension SkyPathSDK.SPLocationState : Swift.Equatable {}
extension SkyPathSDK.SPLocationState : Swift.Hashable {}
