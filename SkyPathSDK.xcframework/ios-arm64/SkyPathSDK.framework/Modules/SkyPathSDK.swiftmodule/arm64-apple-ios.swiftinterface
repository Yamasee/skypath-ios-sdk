// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SkyPathSDK
import CFNetwork
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreGraphics
import CoreLocation
import CoreMotion
import CryptoKit
import Foundation
import GameKit
import MapKit
@_exported import SkyPathSDK
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
public class FlightPlan : Swift.Codable {
  final public let id: Swift.Int
  final public let flightPlanId: Swift.String
  final public let updatedAt: Swift.String
  final public let airlineId: Swift.String
  final public let flightId: Swift.String
  final public let departureAirport: Swift.String
  final public let arrivalAirport: Swift.String
  final public let fuelWeight: Swift.Int?
  final public let fuelUnit: Swift.String?
  final public let fuelDuration: Swift.String?
  final public let reserveFuel: Swift.Int?
  final public let reserveFuelUnit: Swift.String?
  final public let scheduledDeparture: Swift.String
  final public let scheduledArrival: Swift.String
  final public let flightPlanVersion: Swift.String?
  final public let waypoints: [SkyPathSDK.FlightWaypoint]
  final public let aircraftRegistration: Swift.String?
  final public let aircraftIdentifier: Swift.String?
  final public let aircraftIcaoType: Swift.String?
  final public let aircraftIataType: Swift.String?
  public var aircraft: SkyPathSDK.Aircraft? {
    get
    set
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum AirportSize : Swift.Int, Swift.Codable {
  case important
  case large
  case medium
  case small
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Airport : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var icao: Swift.String
  public var lat: Swift.Float
  public var lng: Swift.Float
  public var iata: Swift.String
  public var size: SkyPathSDK.AirportSize
  public var show: Swift.Bool
  public var search: Swift.Bool
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SkyPathSDK.Airport, b: SkyPathSDK.Airport) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
extension SkyPathSDK.Airport {
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.Airport {
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public class FlightWaypoint : Swift.Codable {
  final public let id: Swift.Int
  final public let flightPlanId: Swift.String?
  final public let waypointId: Swift.String
  final public let name: Swift.String
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  final public let order: Swift.Int
  final public let estimatedAltitude: Swift.Int?
  required public init(from decoder: Swift.Decoder) throws
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension SkyPathSDK.FlightWaypoint : Swift.Equatable {
  public static func == (lhs: SkyPathSDK.FlightWaypoint, rhs: SkyPathSDK.FlightWaypoint) -> Swift.Bool
}
extension SkyPathSDK.FlightWaypoint {
  public var airport: SkyPathSDK.Airport? {
    get
  }
}
public struct RawDataResponseRequest {
  public let type: SkyPathSDK.RawDataTriggerType
  public let startTs: Swift.Int
  public let duration: Swift.Int
}
public struct User : Swift.Codable {
  public let id: Swift.String
  public let role: Swift.String
  public let userName: Swift.String?
  public let company: Swift.String?
  public let companyId: Swift.String
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let routingEnabled: Swift.Bool?
  public let betaFeatures: Swift.Bool?
  public let flightPlanPrefix: Swift.String?
  public let demo: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AlertError : SkyPathSDK.SPError {
  case invalidCoordinates
  case invalidPolygon
  case altRangeNotRoundToThousandFeet
  case general(error: SkyPathSDK.GeneralError)
}
public struct LandingTimeReport : Swift.Codable {
  public let landingTime: Swift.Int
  public let ts: Swift.Int
  public let airportICAO: Swift.String
  public let delayTime: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FlightEndReport : Swift.Codable {
  public var total: SkyPathSDK.FlightEndReportTotal
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ForgotPasswordError : SkyPathSDK.SPError {
  case userIdInvalid
  case general(error: SkyPathSDK.GeneralError)
}
public enum DataUpdateFrequency : Swift.String, Swift.Codable {
  case none
  case minimal
  case medium
  case fast
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Storage {
  public enum Directory {
    case documents
    case caches
    public static func == (a: SkyPathSDK.Storage.Directory, b: SkyPathSDK.Storage.Directory) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func url(forFileNamed fileName: Swift.String, in directory: SkyPathSDK.Storage.Directory) -> Foundation.URL
  public static func store<T>(_ object: T, to url: Foundation.URL) where T : Swift.Encodable
  public static func retrieve<T>(from url: Foundation.URL, as type: T.Type) -> T? where T : Swift.Decodable
  public static func remove(fileUrl url: Foundation.URL)
  public static func storeData(_ data: Foundation.Data, to url: Foundation.URL)
  @objc deinit
}
public enum TurbulenceSeverity : Swift.Int, Swift.Equatable, Swift.Comparable, Swift.Codable {
  case none
  case light
  case lightModerate
  case moderate
  case moderateSevere
  case severe
  @available(*, unavailable, renamed: "none")
  case None
  @available(*, unavailable, renamed: "light")
  case Light
  @available(*, unavailable, renamed: "lightModerate")
  case LightModarate
  @available(*, unavailable, renamed: "moderate")
  case Moderate
  @available(*, unavailable, renamed: "moderateSevere")
  case ModerateSevere
  @available(*, unavailable, renamed: "severe")
  case Severe
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SkyPathSDK.TurbulenceSeverity : Swift.CaseIterable {
  public static var allCases: [SkyPathSDK.TurbulenceSeverity] {
    get
  }
  public typealias AllCases = [SkyPathSDK.TurbulenceSeverity]
}
extension SkyPathSDK.TurbulenceSeverity {
  public var color: UIKit.UIColor {
    get
  }
  public var borderColor: UIKit.UIColor {
    get
  }
  public var colorOpacity: CoreGraphics.CGFloat {
    get
  }
  public var colorWithOpacity: UIKit.UIColor {
    get
  }
}
extension SkyPathSDK.TurbulenceSeverity {
  public static func < (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func <= (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func > (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
  public static func >= (lhs: SkyPathSDK.TurbulenceSeverity, rhs: SkyPathSDK.TurbulenceSeverity) -> Swift.Bool
}
extension CoreLocation.CLLocation {
  public var tile: SkyPathSDK.Tile {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D {
  public var tile: SkyPathSDK.Tile {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D {
  public func isBehindOf(coordinate: CoreLocation.CLLocationCoordinate2D, heading: Swift.Double) -> Swift.Bool
}
public struct Tile : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public var h3Hex: Swift.String
  public var alt: Swift.Int
  public init(h3Hex: Swift.String, alt: Swift.Int?)
  public static func == (a: SkyPathSDK.Tile, b: SkyPathSDK.Tile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.Tile {
  public var key: Swift.String {
    get
  }
  public var keyByCoord: Swift.String {
    get
  }
  public var altMetersRange: Swift.ClosedRange<Swift.Double> {
    get
  }
  public var altMeters: Swift.Double {
    get
  }
  public var center: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SPLocalNotificationManager : ObjectiveC.NSObject {
  public static let shared: SkyPathSDK.SPLocalNotificationManager
  public func checkNotificationSettings(completion: ((_ status: UserNotifications.UNAuthorizationStatus) -> Swift.Void)? = nil)
  public func scheduleNotification(title: Swift.String, body: Swift.String, sound: Swift.String? = nil, contentCategoryIdentifier: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@available(*, unavailable, renamed: "SkyPathDelegate")
public protocol YamaseeCoreDelegate : AnyObject {
}
extension SkyPathSDK.SkyPath {
  @available(*, unavailable, renamed: "stop()")
  public func logout()
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> Swift.String
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, excludeTiles: [Swift.String] = [], aggregate: Swift.Bool = true) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> Swift.String
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func getOwnTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1, aggregate: Swift.Bool = true) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use `turbulence(with:)` instead")
  public func turbulence(inTile tile: Swift.String, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, own: Swift.Bool = false) -> [SkyPathSDK.TurbulenceItem]
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getAlert(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (maxTurboSevAtAlt: SkyPathSDK.TurbulenceSeverity, maxTurboSevBelow: SkyPathSDK.TurbulenceSeverity, maxTurboSevAbove: SkyPathSDK.TurbulenceSeverity)
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getAlertTiles(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (alertTilesAtAlt: [SkyPathSDK.TurbulenceItem], alertTilesBelow: [SkyPathSDK.TurbulenceItem], alertTilesAbove: [SkyPathSDK.TurbulenceItem])
  @available(*, unavailable, message: "Use alerts(with:) instead.")
  public func getRouteAlerts(route: [CoreLocation.CLLocation], widthAround: Foundation.Measurement<Foundation.UnitLength> = .init(value: 0, unit: UnitLength.nauticalMiles), altitude: Foundation.Measurement<Foundation.UnitLength>, timeSpan: Swift.Int) -> (alertTilesAtAlt: [SkyPathSDK.TurbulenceItem], alertTilesBelow: [SkyPathSDK.TurbulenceItem], alertTilesAbove: [SkyPathSDK.TurbulenceItem])
  @available(*, unavailable, message: "Use setAircraft(:) instead")
  public func setAircraft(aircraft: Swift.String)
  @available(*, unavailable, message: "Use aircraft() instead")
  public func getAircraft() -> Swift.String
  @available(*, unavailable, message: "Use aircrafts() instead")
  public func getAircraftTypes() -> [SkyPathSDK.Aircraft]
  @available(*, unavailable, message: "Use `startFlight(_:)` instead")
  public func setFlightNumber(_ flightNumber: Swift.String?)
  @available(*, unavailable, message: "Use `startFlight(_:)` instead")
  public func setFlightNumber(flightNumber: Swift.String)
  @available(*, unavailable, renamed: "simulatedLocation(_:)")
  public func simulatedLocation(location: CoreLocation.CLLocation)
  @available(*, unavailable, message: "Use `dataUpdateFrequency` instead")
  public var dataMode: SkyPathSDK.SkyPath.DataMode {
    get
    set
  }
  @available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
  public enum DataMode {
    case `default`
    public static func == (a: SkyPathSDK.SkyPath.DataMode, b: SkyPathSDK.SkyPath.DataMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, unavailable, message: "Use `aircraft` instead")
  public func setAircraft(_ aircraft: Swift.String?)
  @available(*, unavailable, message: "Use `start(withUserId:companyId:apiKey:env)` instead")
  public func start(apiKey: Swift.String, baseUrl: Swift.String, env: SkyPathSDK.Environment? = nil)
  @available(*, unavailable, message: "Use `start(withUserId:companyId:apiKey:env)` instead")
  public func partnerLogin(userId: Swift.String, companyId: Swift.String, completionHandler: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.SkyPath.PartnerLoginError?) -> Swift.Void)
  @available(*, unavailable, message: "Use `LoginError` instead")
  public enum PartnerLoginError {
  }
  @available(*, unavailable, renamed: "enableSimulation(_:)")
  public func setSimulatorMode(isLocationSimulatorOn: Swift.Bool)
  @available(*, unavailable, renamed: "enablePushSimulated(_:)")
  public func setPushSimulatedEnabled(_ enabled: Swift.Bool)
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func setAngle()
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func resetAngle()
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func isInPosition() -> Swift.Bool
  @available(*, unavailable, message: "Angle is now auto calibrated and notified in `didChangeDevicePosition(_:horizontal:)` delegate")
  public func isCurrentPositionSteady() -> Swift.Bool
  @available(*, unavailable, renamed: "didReceiveAlert(_:)")
  public func newAlert(_ alert: SkyPathSDK.AlertResult)
}
@available(*, unavailable, renamed: "Aircraft")
public struct YamaseeAircraftType {
}
@available(*, unavailable, renamed: "SPLocation")
public struct YamaseeLocation {
}
@available(*, unavailable, renamed: "SPLocationState")
public enum YamaseeLocationState {
}
@available(*, unavailable, renamed: "SPLocation")
public struct YMLocation {
}
@available(*, unavailable, renamed: "SPLocationState")
public enum YMLocationState {
}
@available(*, unavailable, renamed: "SPError")
public protocol YSError : Swift.Error {
}
@available(*, unavailable, renamed: "StartError")
public enum LoginError : Swift.Error {
  case general(error: SkyPathSDK.GeneralError)
}
@available(*, unavailable, renamed: "WeatherType")
public enum WXType {
}
@available(*, unavailable, renamed: "Weather")
public struct WeatherItem {
}
extension SkyPathSDK.SkyPathDelegate {
  @available(*, unavailable, message: "Use `didReceiveNewTurbulenceData()` instead")
  public func newTurbulenceData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `detectedTurbulence(_:)` instead")
  public func turbulenceDetected(newTurbulence: SkyPathSDK.TurbulenceItem)
  @available(*, unavailable, message: "Use `didReceiveNewTrafficData()` instead")
  public func newTrafficData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `didReceiveNewWeatherData()` instead")
  public func newWeatherData(serverUpdateTime: Swift.Int)
  @available(*, unavailable, message: "Use `didReceiveNewAirportsData()` instead")
  public func newAirportsData()
  @available(*, unavailable, message: "Use `didChangeDevicePosition(_:horizontal:)` instead")
  public func deviceAngleStatusChanged(isInAngle: Swift.Bool)
}
public enum RawDataTriggerType : Swift.RawRepresentable, Swift.Codable {
  case test
  case sequence(sev: SkyPathSDK.TurbulenceSeverity)
  case lonely(sev: SkyPathSDK.TurbulenceSeverity)
  case sequenceTiles(sev: SkyPathSDK.TurbulenceSeverity)
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LoggingLevel {
  case verbose
  case debug
  case info
  case warn
  case error
  public static func == (a: SkyPathSDK.LoggingLevel, b: SkyPathSDK.LoggingLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Logger {
  public var enabled: Swift.Bool {
    get
    set
  }
  public var level: SkyPathSDK.LoggingLevel {
    get
    set
  }
  public var rollingFrequency: Swift.Double
  public var maximumNumberOfLogFiles: Swift.Int
  public var symbol: Swift.Bool {
    get
    set
  }
  @objc deinit
  public func log(_ text: Swift.String)
  public func logFileUrls() -> [Foundation.URL]
}
extension SkyPathSDK.Logger {
  public func logNetworkInterfaces()
}
public struct BrakingAction : Swift.Codable {
  public var trend: SkyPathSDK.AirportDataTrend
  public var reports: [SkyPathSDK.BrakingActionReport]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TurbulenceItem : Swift.Codable {
  public let sev: SkyPathSDK.TurbulenceSeverity
  public let bbox: [CoreLocation.CLLocationCoordinate2D]
  public let tile: SkyPathSDK.Tile
  public let alt: Swift.Double
  public let ts: Swift.Int
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public var h3Hex: Swift.String
  public init(sev: SkyPathSDK.TurbulenceSeverity, bbox: [CoreLocation.CLLocationCoordinate2D], tile: SkyPathSDK.Tile, alt: Swift.Double, ts: Swift.Int, coordinate: CoreLocation.CLLocationCoordinate2D, h3Hex: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.TurbulenceItem {
  public var description: Swift.String {
    get
  }
}
extension Swift.Array where Element == SkyPathSDK.TurbulenceItem {
  public func geoJSON(withType type: SkyPathSDK.TurbulenceResultType) -> Swift.String
}
extension SkyPathSDK.TurbulenceItem : Swift.Equatable {
  public static func == (lhs: SkyPathSDK.TurbulenceItem, rhs: SkyPathSDK.TurbulenceItem) -> Swift.Bool
}
public struct FlightEndReportTotal : Swift.Codable {
  public var user: Swift.String
  public var flights: Swift.Int
  public var pirepTotal: Swift.Int
  public var turbTotal: Swift.Int
  public var turb0Total: Swift.Int
  public var turb1Total: Swift.Int
  public var turb2Total: Swift.Int
  public var turb3Total: Swift.Int
  public var turb4Total: Swift.Int
  public var turb5Total: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
}
extension SkyPathSDK.FlightEndReportTotal {
  public init(from decoder: Swift.Decoder) throws
}
public enum BrakingActionLevel : Swift.String, Swift.Codable {
  case lessThanPoor
  case poor
  case medPoor
  case med
  case goodMed
  case good
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BrakingActionReport : Swift.Codable {
  public var runway: Swift.String
  public var level: SkyPathSDK.BrakingActionLevel
  public var ts: Swift.Int
  public var airportICAO: Swift.String
  public var aircraft: Swift.String?
  public var flight_id: Swift.String?
  public var id: Swift.String?
  public init(runway: Swift.String, level: SkyPathSDK.BrakingActionLevel, date: Foundation.Date, airport: SkyPathSDK.Airport)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.BrakingActionReport {
  public var date: Foundation.Date {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RouteWaypointsTranslationResponse : Swift.Decodable {
  public var waypoints: [SkyPathSDK.FlightWaypoint]
  public var pathQuery: [SkyPathSDK.PathQuery]
  public init()
  public init(from decoder: Swift.Decoder) throws
}
public struct PathQuery : Swift.Decodable {
  public let name: Swift.String
  public let processed: Swift.Bool
  public var subWaypoints: [SkyPathSDK.FlightWaypoint]?
  public init(from decoder: Swift.Decoder) throws
}
extension CoreLocation.CLError.Code : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum StartError : SkyPathSDK.SPError {
  case apiKeyInvalid
  case envInvalid
  case userIdOrAirlineInvalid
  case userIdOrPasswordInvalid
  case userLocked(message: Swift.String)
  case ssoInvalid
  case ssoDisabledInPublic
  case weakPassword
  case general(error: SkyPathSDK.GeneralError)
}
public struct DataTypeOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let turbulence: SkyPathSDK.DataTypeOptions
  public static let turbulencePolygons: SkyPathSDK.DataTypeOptions
  public static let traffic: SkyPathSDK.DataTypeOptions
  public static let pireps: SkyPathSDK.DataTypeOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SkyPathSDK.DataTypeOptions
  public typealias Element = SkyPathSDK.DataTypeOptions
  public typealias RawValue = Swift.Int
}
extension CoreLocation.CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct AviationWeather : Swift.Codable {
  public var metar: SkyPathSDK.AviationWeatherMetar
  public var taf: SkyPathSDK.AviationWeatherTaf
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AviationWeatherMetar : Swift.Codable {
  public var rawText: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AviationWeatherTaf : Swift.Codable {
  public var rawText: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AlertQuery {
  public let distance: Swift.Double
  public let angleSpan: Swift.Double
  public let altRange: Swift.ClosedRange<Swift.Double>?
  public let switchToBeamOnDistanceFromRoute: Swift.Double
  public let excludeOwnTimeSpan: Swift.Int
  public var route: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Swift.Double?
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime?
  public init(distance: Swift.Double = 100, angleSpan: Swift.Double = 15, altRange: Swift.ClosedRange<Swift.Double>? = nil, route: [CoreLocation.CLLocationCoordinate2D]? = nil, widthAround: Swift.Double? = 20, switchToBeamOnDistanceFromRoute: Swift.Double = 20, excludeOwnTimeSpan: Swift.Int = 60)
}
public struct DataQuery {
  public var types: SkyPathSDK.DataTypeOptions
  public var sevs: [SkyPathSDK.TurbulenceSeverity]
  public var polygon: [CoreLocation.CLLocationCoordinate2D]?
  public init(types: SkyPathSDK.DataTypeOptions = .turbulence, sevs: [SkyPathSDK.TurbulenceSeverity] = TurbulenceSeverity.allCases, polygon: [CoreLocation.CLLocationCoordinate2D]? = nil)
}
public enum AlertResultType {
  case none
  case coordinates
  case polygon
  case beam
  public static func == (a: SkyPathSDK.AlertResultType, b: SkyPathSDK.AlertResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertResult {
  public var turbulence: [SkyPathSDK.TurbulenceItem]
  public var type: SkyPathSDK.AlertResultType
}
extension SkyPathSDK.AlertResult : Swift.Equatable {
  public static func == (lhs: SkyPathSDK.AlertResult, rhs: SkyPathSDK.AlertResult) -> Swift.Bool
}
public struct SettingsValue<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var value: T?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ServerSettings : Swift.Codable {
  public var updatedAt: Swift.String?
  public var connectivity: SkyPathSDK.SettingsConnectivity?
  public var debug: SkyPathSDK.SettingsDebug?
  public var airportInfo: SkyPathSDK.SettingsAirportInfo?
  public var brakingActions: SkyPathSDK.SettingsBrakingActions?
  public var turbulence: SkyPathSDK.SettingsTurbulence?
  public var ui: SkyPathSDK.SettingsUI?
  public var beta: SkyPathSDK.SettingsBeta?
  public var data: SkyPathSDK.SettingsData?
  public var location: SkyPathSDK.SettingsLocation?
  public var filter: SkyPathSDK.SettingsFilter?
  public var updatedAtDate: Foundation.Date? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsConnectivity : Swift.Codable {
  public var timeToNotice: SkyPathSDK.SettingsValue<Swift.Int>?
  public var timeToAlert: SkyPathSDK.SettingsValue<Swift.Int>?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsDebug : Swift.Codable {
  public var sendLogsAutomaticallyOnFlightEnd: SkyPathSDK.SettingsValue<Swift.Bool>?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsAirportInfo : Swift.Codable {
  public struct Weather : Swift.Codable {
    public var enabled: Swift.Bool?
    public var expireIn: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ArrivalDelays : Swift.Codable {
    public var enabled: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct BrakingActions : Swift.Codable {
    public var enabled: Swift.Bool?
    public var expireIn: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Features : Swift.Codable {
    public var weather: SkyPathSDK.SettingsAirportInfo.Weather?
    public var arrivalDelays: SkyPathSDK.SettingsAirportInfo.ArrivalDelays?
    public var brakingActions: SkyPathSDK.SettingsAirportInfo.BrakingActions?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LandingNotification : Swift.Codable {
    public var maxTimeTo: Swift.Int?
    public var maxDistanceToArrivalAirport: Swift.Double?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var enabled: Swift.Bool?
  public var features: SkyPathSDK.SettingsAirportInfo.Features?
  public var landingNotification: SkyPathSDK.SettingsAirportInfo.LandingNotification?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsBrakingActions : Swift.Codable {
  public struct Popup : Swift.Codable {
    public var enabled: Swift.Bool?
    public var weatherTypes: Swift.String?
    public var zeroKnotsDuration: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var popup: SkyPathSDK.SettingsBrakingActions.Popup?
  public var expireIn: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsTurbulence : Swift.Codable {
  public var tilesBelow: Swift.Int?
  public var tilesAbove: Swift.Int?
  public var alertMinSeverity: SkyPathSDK.TurbulenceSeverity?
  public var alertMinTimeTo: Swift.Int?
  public var alertMaxTimeTo: Swift.Int?
  public var alertMinTimeToShowOnMap: Swift.Int?
  public var alertMaxTimeToShowOnMap: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsUI : Swift.Codable {
  public struct VerticalView : Swift.Codable {
    public var enabled: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct TimeControl : Swift.Codable {
    public var value: [Swift.Double]?
    public var `default`: Swift.Double?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FlightSummary : Swift.Codable {
    public var enabled: Swift.Bool?
    public var timeToShowAfterLanded: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var verticalView: SkyPathSDK.SettingsUI.VerticalView?
  public var timeControl: SkyPathSDK.SettingsUI.TimeControl?
  public var flightSummary: SkyPathSDK.SettingsUI.FlightSummary?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsBeta : Swift.Codable {
  public var enabled: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsData : Swift.Codable {
  public var pollEveryXSecs: Swift.Int?
  public var updateEveryXSecs: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsLocation : Swift.Codable {
  public var outdatedTime: Swift.Int?
  public var drTime: Swift.Int?
  public var refreshTime: Swift.Int?
  public var refreshInterval: Swift.Int?
  public var inAirAltitude: Swift.Int?
  public var inAirSpeed: Swift.Int?
  public var externalOutdatedTime: Swift.Int?
  public var externalEnabled: Swift.Bool?
  public var baroAltitudeDifference: Swift.Double?
  public var accuracyVertical: Swift.Double?
  public var accuracyHorizontal: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SettingsFilter : Swift.Codable {
  public var thDelta1: Swift.Double?
  public var thDelta2: Swift.Double?
  public var thDelta3: Swift.Double?
  public var thDelta4: Swift.Double?
  public var thDelta5: Swift.Double?
  public var lpTh1: Swift.Double?
  public var lpTh2: Swift.Double?
  public var lpTh3: Swift.Double?
  public var lpTh4: Swift.Double?
  public var avg: Swift.Double?
  public var timeWindowForChange: Swift.Int?
  public var noChangesForTurbulence: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Array where Element == CoreLocation.CLLocationCoordinate2D {
  public func subCoordinatesAhead(from coord: CoreLocation.CLLocationCoordinate2D, distance: Foundation.Measurement<Foundation.UnitLength>? = nil, maxAwayCoordDistance: CoreLocation.CLLocationDistance) -> [CoreLocation.CLLocationCoordinate2D]?
  public func nearest(to coordinate: CoreLocation.CLLocationCoordinate2D) -> (coordinate: CoreLocation.CLLocationCoordinate2D, index: Swift.Int)?
}
extension Foundation.InputStream {
  public func readfully() -> Foundation.Data
}
public struct Flight : Swift.Codable {
  public let dep: Swift.String
  public let dest: Swift.String
  public let fnum: Swift.String
  public var id: Swift.String
  public init(dep: Swift.String = "", dest: Swift.String = "", fnum: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SPLocationState {
  case good
  case dr
  case none
  case external
  case externalDr
  public static func == (a: SkyPathSDK.SPLocationState, b: SkyPathSDK.SPLocationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SPLocation {
  public let location: CoreLocation.CLLocation?
  public let state: SkyPathSDK.SPLocationState
}
public enum StaticContentType {
  case airports
  case airportRunways
  case userGuide
  case releaseNotes
  case troubleshooting
  case training
  public static var appVersion: Swift.String {
    get
    set
  }
  public var fileUrl: Foundation.URL {
    get
  }
  public static func == (a: SkyPathSDK.StaticContentType, b: SkyPathSDK.StaticContentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Hello : Swift.Codable {
  public var latestAppVersion: Swift.String
  public var currentAppVersion: Swift.String
  public var minimalCompatibleAppVersion: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DataHistoryTime : Swift.Double, Swift.Codable, Swift.CaseIterable {
  case halfHour
  case hour
  case twoHours
  case fourHours
  case sixHours
  public init(mins: Swift.Int)
  public init?(rawValue: Swift.Double)
  public typealias AllCases = [SkyPathSDK.DataHistoryTime]
  public typealias RawValue = Swift.Double
  public static var allCases: [SkyPathSDK.DataHistoryTime] {
    get
  }
  public var rawValue: Swift.Double {
    get
  }
}
extension SkyPathSDK.DataHistoryTime {
  public var asPathComponent: Swift.String {
    get
  }
  public var mins: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
}
public enum QueryError : SkyPathSDK.SPError {
  case altRangeNotRoundToThousandFeet
  case general(error: SkyPathSDK.GeneralError)
}
public protocol SPError : Swift.Error {
}
public struct TurbulenceResult {
  public var items: [SkyPathSDK.TurbulenceItem]
  public var geoJSON: Swift.String
}
public protocol SkyPathDelegate : AnyObject {
  func didUpdateRecordingStatus(to recording: Swift.Bool)
  func didReceiveNewTurbulenceData()
  func detectedTurbulence(_ turbulence: SkyPathSDK.TurbulenceItem)
  func didReceiveNewTrafficData()
  func didReceiveNewWeatherData()
  func didReportWeather(_ weather: SkyPathSDK.Weather)
  func didReceiveNewAirportsData()
  func didFailToFetchNewData(with error: SkyPathSDK.SPError)
  func didReceiveAlert(_ alert: SkyPathSDK.AlertResult)
  func locationUpdated(to location: SkyPathSDK.SPLocation)
  func locationManagerDidChangeAuthorization(status: CoreLocation.CLAuthorizationStatus)
  func locationManagerDidFail(withError error: Swift.Error)
  func airborneStatus(isAirborne: Swift.Bool)
  func flightPhaseDidChange(to flightPhase: SkyPathSDK.FlightPhase)
  func serverReachabilityUpdated(to isReachable: Swift.Bool)
  func feedbackRequested(with request: SkyPathSDK.RawDataResponseRequest, completion: @escaping (SkyPathSDK.RawDataUserResponse?) -> Swift.Void)
  func flightPlanDidUpdate(to flightPlan: SkyPathSDK.FlightPlan)
  func didChangeDevicePosition(_ inPosition: Swift.Bool, horizontal: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class SkyPath {
  public static let shared: SkyPathSDK.SkyPath
  weak public var delegate: SkyPathSDK.SkyPathDelegate?
  public func start(apiKey: Swift.String, airline: Swift.String, userId: Swift.String, env: SkyPathSDK.Environment? = nil, completion: @escaping (_ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func login(userId: Swift.String, airline: Swift.String, password: Swift.String? = nil, completion: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func ssoLogin(from: UIKit.UIViewController, airlinesCode: Swift.String? = nil, userId: Swift.String? = nil, onDisappear: @escaping () -> Swift.Void, completion: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.StartError?, _ timeouts: SkyPathSDK.SessionTimeouts?) -> Swift.Void)
  public func setOnSSORelogin(_ onSSORelogin: @escaping () -> Swift.Void)
  public func isLoggedIn() -> Swift.Bool
  public func stop()
  public var user: SkyPathSDK.User? {
    get
  }
  public func setPrivateDistribution(_ privateDistribution: Swift.Bool)
  public func forgotPassword(userId: Swift.String, completion: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.ForgotPasswordError?) -> Swift.Void)
  public func isNewUser(userIdOrEmail: Swift.String, completion: @escaping (_ result: Swift.Bool?, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func setUserProfile(userIdOrEmail: Swift.String, password: Swift.String, completion: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func isFreshUser(userIdOrEmail: Swift.String, completion: @escaping (_ result: Swift.Bool?, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func otpRequest(completion: @escaping (_ result: Swift.Bool?, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func otpValidate(otp: Swift.String, completion: @escaping (_ result: Swift.Bool?, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public func setProfile(password: Swift.String, completion: @escaping (_ result: Swift.Bool, _ error: SkyPathSDK.StartError?) -> Swift.Void)
  public var dataQuery: SkyPathSDK.DataQuery {
    get
    set
  }
  public var dataUpdateFrequency: SkyPathSDK.DataUpdateFrequency {
    get
    set
  }
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime {
    get
    set
  }
  public var dataUpdatedAt: Foundation.Date? {
    get
  }
  public func fetchData(refresh: Swift.Bool = false)
  public func turbulence(with query: SkyPathSDK.TurbulenceQuery) -> Swift.Result<SkyPathSDK.TurbulenceResult, SkyPathSDK.QueryError>
  public func tilesInBeam(with query: SkyPathSDK.TilesBeamQuery) -> [Swift.String]
  public var turbulencePolygons: Swift.String? {
    get
  }
  public func getTrafficJson(altRange: Swift.ClosedRange<Swift.Double>, predict: Swift.Bool = false) -> Swift.String
  public func getTraffic(altRange: Swift.ClosedRange<Swift.Double>, predict: Swift.Bool = false) -> [SkyPathSDK.Traffic]
  public func reportWeather(type: SkyPathSDK.WeatherType, at location: CoreLocation.CLLocation, speed: Swift.Double? = nil)
  public func getWeather(types: [SkyPathSDK.WeatherType], altRange: Swift.ClosedRange<Swift.Double>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [SkyPathSDK.Weather]
  public func getWeather(types: [SkyPathSDK.WeatherType], altRange: Swift.ClosedRange<Swift.Double>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  public func getOwnWeather(types: [SkyPathSDK.WeatherType], altRange: Swift.ClosedRange<Swift.Double>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> [SkyPathSDK.Weather]
  public func getOwnWeather(types: [SkyPathSDK.WeatherType], altRange: Swift.ClosedRange<Swift.Double>, timeSpan: Swift.Int, zoomLevel: Swift.Int = 1) -> Swift.String
  public func delete(_ weather: [SkyPathSDK.Weather])
  public func alertedTurbulenceSeverity(_ sev: SkyPathSDK.TurbulenceSeverity)
  public func alerts(with query: SkyPathSDK.AlertQuery = AlertQuery()) -> Swift.Result<SkyPathSDK.AlertResult, SkyPathSDK.AlertError>
  public func startMonitoringAlerts(with query: SkyPathSDK.AlertQuery = AlertQuery())
  public func stopMonitoringAlerts()
  public var isMonitoringAlerts: Swift.Bool {
    get
  }
  public func reportBrakingAction(_ report: SkyPathSDK.BrakingActionReport)
  public func getMyFlight(completion: @escaping (_ flight: SkyPathSDK.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func searchFlight(byQuery query: Swift.String, completion: @escaping (_ flight: SkyPathSDK.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func getFlight(byId id: Swift.String, completion: @escaping (_ flight: SkyPathSDK.FlightPlan?, _ error: Swift.Error?) -> Swift.Void)
  public func getWaypoints(for inputs: [SkyPathSDK.FlightWaypointInput], completion: @escaping (_ response: SkyPathSDK.RouteWaypointsTranslationResponse?, _ error: Swift.Error?) -> Swift.Void)
  public var aircraft: SkyPathSDK.Aircraft? {
    get
    set
  }
  public func aircrafts() -> [SkyPathSDK.Aircraft]
  public func aircraft(byId id: Swift.String) -> SkyPathSDK.Aircraft?
  public func airports() -> [SkyPathSDK.Airport]
  public func airports() -> Swift.String
  public func nearestAirports(to location: CoreLocation.CLLocation, count: Swift.Int = 5) -> [SkyPathSDK.Airport]
  public func nearestAirports(to location: CoreLocation.CLLocation, count: Swift.Int = 5) -> Swift.String
  public func addAirport(_ airport: SkyPathSDK.Airport)
  public func getDataForAirport(withICAO icao: Swift.String, completion: @escaping (_ data: SkyPathSDK.AirportData?, _ error: Swift.Error?) -> Swift.Void)
  public func startFlight(_ flight: SkyPathSDK.Flight)
  public func endFlight()
  public func setFlight(_ flight: SkyPathSDK.Flight?)
  public var flight: SkyPathSDK.Flight? {
    get
  }
  public var flightPlan: SkyPathSDK.FlightPlan? {
    get
    set
  }
  public func sendFlightLogs(fileUrl: Foundation.URL)
  public var flightPhase: SkyPathSDK.FlightPhase {
    get
  }
  public var airborne: Swift.Bool {
    get
  }
  public func getFlightEndReport(completion: @escaping (_ flightEndReport: SkyPathSDK.FlightEndReport?, _ error: Swift.Error?) -> Swift.Void)
  public func contact(email: Swift.String, message: Swift.String, logsFileUrl: Foundation.URL? = nil, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func sayHello(completion: @escaping (SkyPathSDK.Hello?, Swift.Error?) -> Swift.Void)
  public var serverSettings: SkyPathSDK.ServerSettings? {
    get
  }
  public func acknowledgeTerms()
  public var askBeforeRequestingLocationAuthorizationBlock: ((_ completion: @escaping (_ allow: Swift.Bool) -> Swift.Void) -> Swift.Bool)?
  public var version: Swift.String {
    get
  }
  public var apiKey: Swift.String {
    get
  }
  public func enableSimulation(_ enabled: Swift.Bool)
  public func simulatedLocation(_ location: CoreLocation.CLLocation)
  public func enablePushSimulated(_ enabled: Swift.Bool)
  public func simulateTurbulence(sev: SkyPathSDK.TurbulenceSeverity)
  public var logger: SkyPathSDK.Logger {
    get
  }
  @objc deinit
}
extension SkyPathSDK.SkyPathDelegate {
  public func detectedTurbulence(_ turbulence: SkyPathSDK.TurbulenceItem)
  public func didReceiveNewTrafficData()
  public func didReceiveNewWeatherData()
  public func didReportWeather(_ weather: SkyPathSDK.Weather)
  public func didReceiveNewAirportsData()
  public func didFailToFetchNewData(with error: SkyPathSDK.SPError)
  public func didReceiveAlert(_ alert: SkyPathSDK.AlertResult)
  public func airborneStatus(isAirborne: Swift.Bool)
  public func locationUpdated(to location: SkyPathSDK.SPLocation)
  public func locationManagerDidChangeAuthorization(status: CoreLocation.CLAuthorizationStatus)
  public func locationManagerDidFail(withError error: Swift.Error)
  public func flightPhaseDidChange(to flightPhase: SkyPathSDK.FlightPhase)
  public func serverReachabilityUpdated(to isReachable: Swift.Bool)
  public func feedbackRequested(with request: SkyPathSDK.RawDataResponseRequest, completion: @escaping (SkyPathSDK.RawDataUserResponse?) -> Swift.Void)
  public func flightPlanDidUpdate(to flightPlan: SkyPathSDK.FlightPlan)
}
public enum AirportDataTrend : Swift.String, Swift.Codable {
  case negative
  case neutral
  case positive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AirportData : Swift.Codable {
  public var weather: SkyPathSDK.AviationWeather?
  public var brakingAction: SkyPathSDK.BrakingAction?
  public var landingDelay: SkyPathSDK.LandingDelay?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TurbulenceQuery {
  public let type: SkyPathSDK.TurbulenceResultType
  public let altRange: Swift.ClosedRange<Swift.Double>?
  public let resultOptions: SkyPathSDK.TurbulenceResultOptions
  public var aggregate: Swift.Bool
  public var tiles: [Swift.String]?
  public var sevs: [SkyPathSDK.TurbulenceSeverity]?
  public var dataHistoryTime: SkyPathSDK.DataHistoryTime?
  public var route: [CoreLocation.CLLocationCoordinate2D]?
  public var widthAround: Swift.Double?
  public init(type: SkyPathSDK.TurbulenceResultType = .server, altRange: Swift.ClosedRange<Swift.Double>? = nil, resultOptions: SkyPathSDK.TurbulenceResultOptions = .geoJSON, aggregate: Swift.Bool = true, tiles: [Swift.String]? = nil)
}
public struct TurbulenceResultOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let items: SkyPathSDK.TurbulenceResultOptions
  public static let geoJSON: SkyPathSDK.TurbulenceResultOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = SkyPathSDK.TurbulenceResultOptions
  public typealias Element = SkyPathSDK.TurbulenceResultOptions
  public typealias RawValue = Swift.Int
}
public struct RawDataUserResponse : Swift.Codable {
  public let confirmed: Swift.Bool
  public let suggestedLevel: SkyPathSDK.TurbulenceSeverity?
  public init(confirmed: Swift.Bool, suggestedLevel: SkyPathSDK.TurbulenceSeverity?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AircraftSize : Swift.String, Swift.Codable {
  case small
  case medium
  case large
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Aircraft : Swift.Codable {
  public var id: Swift.String
  public var title: Swift.String
  public var size: SkyPathSDK.AircraftSize
  public var icao: Swift.String?
  public var iata: Swift.String?
  public var group: Swift.String?
  public var family: Swift.String?
  @available(*, unavailable, renamed: "id")
  public var aircraft: Swift.String?
  @available(*, unavailable, renamed: "title")
  public var description: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
extension SkyPathSDK.Aircraft {
  public init(from decoder: Swift.Decoder) throws
}
public struct MapGrid {
  public static func mapGridGeoJSON(stepDegrees: CoreLocation.CLLocationDegrees) -> Swift.String
}
public struct FlightPhase : Swift.Codable {
  public var type: SkyPathSDK.FlightPhaseType
  public var location: CoreLocation.CLLocation
  public var updatedAt: Foundation.Date
  public init(type: SkyPathSDK.FlightPhaseType, location: CoreLocation.CLLocation)
  public static func none() -> SkyPathSDK.FlightPhase
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum FlightPhaseType : Swift.String, Swift.Codable {
  case none
  case taxiing
  case takeoff
  case climb
  case cruise
  case descent
  case landing
  case landed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TurbulenceResultType {
  case server
  case serverExcludeOwn(timeSpan: Swift.Int)
  case own(timeSpan: Swift.Int)
}
public struct GeoUtils {
  public static func alt2TileAlt(alt: Swift.Double) -> Swift.Int
  public static func tileAlt2Alt(tileAlt: Swift.Int) -> Swift.Double
}
extension SkyPathSDK.GeoUtils {
  public static func boundingCoordinates(forTileX tileX: Swift.Int, tileY: Swift.Int) -> [CoreLocation.CLLocationCoordinate2D]
  public static func boundingCoordinatesCenter(forTileX tileX: Swift.Int, tileY: Swift.Int) -> CoreLocation.CLLocationCoordinate2D
}
extension Foundation.NSNotification.Name {
  public static let skyPathDidUpdateSettings: Foundation.Notification.Name
}
extension Foundation.NSError {
  public var isNoConnectionError: Swift.Bool {
    get
  }
  public static var noConnectionCodes: [Swift.Int] {
    get
  }
  public var isServiceUnavailableError: Swift.Bool {
    get
  }
  public static var serviceUnavailableCodes: [Swift.Int] {
    get
  }
}
public struct CodableLocation : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum GeneralError : SkyPathSDK.SPError {
  case internetConnectionAppearsOffline
  case tooManyRequests
  case upgradeRequired(message: Swift.String?)
  case notStarted
  case noLocation
  case other(error: Swift.Error?)
}
public enum WeatherType : Swift.String, Swift.Codable {
  case cb
  case lightning
  case icing
  case shear
  case mwave
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Weather : Swift.Equatable, Swift.Codable {
  public var id: Swift.String?
  public var alt: Swift.Int?
  public var altFeet: Swift.Double?
  public var ts: Swift.Int
  public var type: SkyPathSDK.WeatherType
  public var repId: Swift.String?
  public var hexId: Swift.String
  public var speed: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
  public init(type: SkyPathSDK.WeatherType, lat: Swift.Double, lng: Swift.Double, alt: Swift.Double, simulated: Swift.Bool?, repId: Swift.String, fNum: Swift.String?)
  public static func == (a: SkyPathSDK.Weather, b: SkyPathSDK.Weather) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
extension SkyPathSDK.Weather {
  public var coordinates: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
  public var center: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public struct FlightWaypointInput : Swift.Codable {
  public var waypoint_id: Swift.String
  public var name: Swift.String?
  public var latitude: Swift.Double?
  public var longitude: Swift.Double?
  public var id: Swift.Int?
  public var custom: Swift.Bool
  public init(waypoint_id: Swift.String, name: Swift.String?, latitude: Swift.Double?, longitude: Swift.Double?, id: Swift.Int?, custom: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SessionTimeouts : Swift.Codable {
  public var session: Swift.Int
  public var idle: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LandingDelay : Swift.Codable {
  public var trend: SkyPathSDK.AirportDataTrend
  public var reports: [SkyPathSDK.LandingTimeReport]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TilesBeamQuery {
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public let heading: Swift.Double
  public let distance: Swift.Double
  public let angleSpan: Swift.Double?
  public let widthAround: Swift.Double?
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, heading: Swift.Double, distance: Swift.Double, angleSpan: Swift.Double? = nil, widthAround: Swift.Double? = nil)
}
public struct Traffic : Swift.Encodable {
  public var lat: Swift.Double
  public var lng: Swift.Double
  public var alt: Swift.Double
  public var spAlt: Swift.Int
  public var hdg: Swift.Double
  public var spdNmH: Swift.Double
  public var ts: Swift.Int
  public var user: Swift.String
  public var companyId: Swift.String
  public var aircraftCat: Swift.String
  public var airplane: Swift.String
  public var aircraftSize: SkyPathSDK.AircraftSize
  public var fNum: Swift.String
  public var fNumInsertedManually: Swift.Bool?
  public var dest: Swift.String
  public var dep: Swift.String
  public var spFlightId: Swift.String
  public var tile: SkyPathSDK.Tile
  public var speed: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
}
extension SkyPathSDK.Traffic : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.Traffic {
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
extension Swift.Array where Element == SkyPathSDK.Traffic {
  public func geoJSON() -> Swift.String
}
public enum Environment : Swift.Codable {
  case dev(serverUrl: Swift.String?)
  case prod(serverUrl: Swift.String?)
  public var isValid: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SkyPathSDK.AirportSize : Swift.Equatable {}
extension SkyPathSDK.AirportSize : Swift.Hashable {}
extension SkyPathSDK.AirportSize : Swift.RawRepresentable {}
extension SkyPathSDK.DataUpdateFrequency : Swift.Equatable {}
extension SkyPathSDK.DataUpdateFrequency : Swift.Hashable {}
extension SkyPathSDK.DataUpdateFrequency : Swift.RawRepresentable {}
extension SkyPathSDK.Storage.Directory : Swift.Equatable {}
extension SkyPathSDK.Storage.Directory : Swift.Hashable {}
extension SkyPathSDK.TurbulenceSeverity : Swift.Hashable {}
extension SkyPathSDK.TurbulenceSeverity : Swift.RawRepresentable {}
@available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
extension SkyPathSDK.SkyPath.DataMode : Swift.Equatable {}
@available(*, unavailable, message: "Use `DataUpdateFrequency` instead")
extension SkyPathSDK.SkyPath.DataMode : Swift.Hashable {}
extension SkyPathSDK.LoggingLevel : Swift.Equatable {}
extension SkyPathSDK.LoggingLevel : Swift.Hashable {}
extension SkyPathSDK.BrakingActionLevel : Swift.Equatable {}
extension SkyPathSDK.BrakingActionLevel : Swift.Hashable {}
extension SkyPathSDK.BrakingActionLevel : Swift.RawRepresentable {}
extension SkyPathSDK.AlertResultType : Swift.Equatable {}
extension SkyPathSDK.AlertResultType : Swift.Hashable {}
extension SkyPathSDK.SPLocationState : Swift.Equatable {}
extension SkyPathSDK.SPLocationState : Swift.Hashable {}
extension SkyPathSDK.StaticContentType : Swift.Equatable {}
extension SkyPathSDK.StaticContentType : Swift.Hashable {}
extension SkyPathSDK.DataHistoryTime : Swift.Equatable {}
extension SkyPathSDK.DataHistoryTime : Swift.Hashable {}
extension SkyPathSDK.DataHistoryTime : Swift.RawRepresentable {}
extension SkyPathSDK.AirportDataTrend : Swift.Equatable {}
extension SkyPathSDK.AirportDataTrend : Swift.Hashable {}
extension SkyPathSDK.AirportDataTrend : Swift.RawRepresentable {}
extension SkyPathSDK.AircraftSize : Swift.Equatable {}
extension SkyPathSDK.AircraftSize : Swift.Hashable {}
extension SkyPathSDK.AircraftSize : Swift.RawRepresentable {}
extension SkyPathSDK.FlightPhaseType : Swift.Equatable {}
extension SkyPathSDK.FlightPhaseType : Swift.Hashable {}
extension SkyPathSDK.FlightPhaseType : Swift.RawRepresentable {}
extension SkyPathSDK.WeatherType : Swift.Equatable {}
extension SkyPathSDK.WeatherType : Swift.Hashable {}
extension SkyPathSDK.WeatherType : Swift.RawRepresentable {}
